// Copyright 2025 AutoPDF BuddhiLW
// SPDX-License-Identifier: Apache-2.0

// Package examples demonstrates the full capabilities of the SOLID + DDD + GoF refactored AutoPDF system
package examples

import (
	"context"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"time"

	"github.com/BuddhiLW/AutoPDF/internal/autopdf/application"
	"github.com/BuddhiLW/AutoPDF/internal/autopdf/domain"
)

// ShowcaseSOLIDDDDArchitecture demonstrates the full capabilities of the refactored system
func ShowcaseSOLIDDDDArchitecture() {
	fmt.Println("üèóÔ∏è  AutoPDF SOLID + DDD + GoF Architecture Showcase")
	fmt.Println("=" + string(make([]byte, 60)))
	fmt.Println()

	// Get the service factory (Singleton + Factory Pattern)
	factory := application.GetDefaultFactory()

	// Demonstrate Dependency Injection
	fmt.Println("1Ô∏è‚É£  Dependency Injection & Service Factory")
	fmt.Println("   ‚úì Single service factory instance")
	fmt.Println("   ‚úì All dependencies properly wired")
	fmt.Println("   ‚úì Services depend on abstractions, not concretions")
	fmt.Println()

	// Get all services
	buildService := factory.GetBuildService()
	templateService := factory.GetTemplateProcessingService()
	pdfService := factory.GetPDFGenerationService()
	conversionService := factory.GetConversionService()
	fileService := factory.GetFileManagementService()
	configService := factory.GetConfigurationService()
	eventPublisher := factory.GetEventPublisher()

	ctx := context.Background()

	// Demonstrate Factory Pattern
	fmt.Println("2Ô∏è‚É£  Factory Pattern - Engine Creation")
	demonstrateFactoryPattern()
	fmt.Println()

	// Demonstrate Strategy Pattern
	fmt.Println("3Ô∏è‚É£  Strategy Pattern - Template Processing")
	demonstrateStrategyPattern(templateService, ctx)
	fmt.Println()

	// Demonstrate Observer Pattern
	fmt.Println("4Ô∏è‚É£  Observer Pattern - Event-Driven Architecture")
	demonstrateObserverPattern(eventPublisher)
	fmt.Println()

	// Demonstrate Domain Services
	fmt.Println("5Ô∏è‚É£  Domain Services - Business Logic Orchestration")
	demonstrateDomainServices(buildService, configService, fileService, ctx)
	fmt.Println()

	// Demonstrate Complete Workflow
	fmt.Println("6Ô∏è‚É£  Complete Workflow - All Patterns Working Together")
	demonstrateCompleteWorkflow(buildService, configService, ctx)
	fmt.Println()

	// Demonstrate Advanced Features
	fmt.Println("7Ô∏è‚É£  Advanced Features - Complex Data Structures")
	demonstrateAdvancedFeatures(buildService, configService, ctx)
	fmt.Println()

	// Demonstrate Conversion with Strategy Pattern
	fmt.Println("8Ô∏è‚É£  Conversion Service - Multiple Engine Strategies")
	demonstrateConversionStrategies(conversionService, pdfService, ctx)
	fmt.Println()

	fmt.Println("‚úÖ Showcase complete!")
	fmt.Println()
	fmt.Println("Key Takeaways:")
	fmt.Println("  ‚Ä¢ SOLID principles ensure maintainable, extensible code")
	fmt.Println("  ‚Ä¢ DDD provides clear domain boundaries and business logic")
	fmt.Println("  ‚Ä¢ GoF patterns solve common design problems elegantly")
	fmt.Println("  ‚Ä¢ All components are testable with mocks")
	fmt.Println("  ‚Ä¢ Event-driven architecture enables loose coupling")
}

func demonstrateFactoryPattern() {
	// Template Engine Factory
	templateFactory := domain.NewTemplateEngineFactory()
	engines := templateFactory.GetAvailableEngines()
	fmt.Printf("   Template Engines: %v\n", engines)

	// PDF Engine Factory
	pdfFactory := domain.NewPDFEngineFactory()
	pdfEngines := pdfFactory.GetAvailableEngines()
	fmt.Printf("   PDF Engines: %v\n", pdfEngines)

	// Conversion Engine Factory
	convFactory := domain.NewConversionEngineFactory()
	convEngines := convFactory.GetAvailableEngines()
	fmt.Printf("   Conversion Engines: %v\n", convEngines)

	fmt.Println("   ‚úì Factories abstract complex object creation")
	fmt.Println("   ‚úì Easy to add new engine types")
}

func demonstrateStrategyPattern(templateService domain.TemplateProcessingService, ctx context.Context) {
	// Create a temp file for demonstration
	tempDir, _ := os.MkdirTemp("", "autopdf-demo-*")
	defer os.RemoveAll(tempDir)

	templatePath := filepath.Join(tempDir, "demo.tex")
	content := `\documentclass{article}\begin{document}Hello, delim[[.name]]!\end{document}`
	os.WriteFile(templatePath, []byte(content), 0644)

	// Process template with variables
	variables := map[string]interface{}{
		"name": "SOLID + DDD + GoF",
	}

	result, err := templateService.ProcessTemplate(ctx, templatePath, variables)
	if err == nil {
		fmt.Println("   ‚úì Template processed with LaTeX strategy")
		fmt.Printf("   ‚úì Variables substituted: %v\n", variables)
	}
	_ = result
}

func demonstrateObserverPattern(publisher domain.EventPublisher) {
	// Create a logging handler
	handler := domain.NewLoggingEventHandler()

	// Subscribe to events
	publisher.Subscribe("demo.event", handler)

	// Publish an event
	event := domain.NewDomainEvent("demo.event", map[string]interface{}{
		"message": "Observer pattern in action",
		"time":    time.Now(),
	})

	publisher.Publish(event)

	fmt.Println("   ‚úì Event published and handled")
	fmt.Println("   ‚úì Loose coupling through events")
	fmt.Println("   ‚úì Easy to add new event handlers")
}

func demonstrateDomainServices(
	buildService domain.BuildService,
	configService domain.ConfigurationService,
	fileService domain.FileManagementService,
	ctx context.Context,
) {
	fmt.Println("   Domain Services encapsulate business logic:")
	fmt.Println("   ‚Ä¢ TemplateProcessingService - Template operations")
	fmt.Println("   ‚Ä¢ PDFGenerationService - PDF compilation")
	fmt.Println("   ‚Ä¢ ConversionService - Image conversion")
	fmt.Println("   ‚Ä¢ FileManagementService - File operations")
	fmt.Println("   ‚Ä¢ ConfigurationService - Config management")
	fmt.Println("   ‚Ä¢ BuildService - Workflow orchestration")
	fmt.Println()
	fmt.Println("   ‚úì Each service has single responsibility")
	fmt.Println("   ‚úì Services depend on interfaces")
	fmt.Println("   ‚úì Easy to test with mocks")
}

func demonstrateCompleteWorkflow(
	buildService domain.BuildService,
	configService domain.ConfigurationService,
	ctx context.Context,
) {
	// Create temp directory
	tempDir, _ := os.MkdirTemp("", "autopdf-workflow-*")
	defer os.RemoveAll(tempDir)

	// Create a simple template
	templatePath := filepath.Join(tempDir, "workflow.tex")
	templateContent := `\documentclass{article}
\begin{document}
\title{delim[[.title]]}
\author{delim[[.author]]}
\maketitle
\section{Introduction}
delim[[.content]]
\end{document}`
	os.WriteFile(templatePath, []byte(templateContent), 0644)

	// Create configuration
	cfg := &domain.Configuration{
		Template: templatePath,
		Output:   filepath.Join(tempDir, "workflow-output.pdf"),
		Engine:   "pdflatex",
		Variables: map[string]interface{}{
			"title":   "Complete Workflow Demo",
			"author":  "AutoPDF SOLID + DDD",
			"content": "This demonstrates the complete workflow with all patterns working together.",
		},
	}

	// Build the PDF
	start := time.Now()
	result, err := buildService.BuildPDF(ctx, &domain.BuildRequest{
		TemplatePath: templatePath,
		OutputPath:   cfg.Output,
		Variables:    cfg.Variables,
		ShouldClean:  true,
	})

	if err != nil {
		fmt.Printf("   ‚ö†Ô∏è  Build failed (LaTeX may not be installed): %v\n", err)
		return
	}

	duration := time.Since(start)

	fmt.Printf("   ‚úì PDF built successfully in %v\n", duration)
	fmt.Printf("   ‚úì Output: %s\n", result.PDFPath)
	fmt.Println("   ‚úì All services coordinated by BuildService")
	fmt.Println("   ‚úì Events published throughout the workflow")
}

func demonstrateAdvancedFeatures(
	buildService domain.BuildService,
	configService domain.ConfigurationService,
	ctx context.Context,
) {
	fmt.Println("   Advanced features supported:")
	fmt.Println("   ‚Ä¢ Nested objects and maps")
	fmt.Println("   ‚Ä¢ Arrays and loops")
	fmt.Println("   ‚Ä¢ Complex data structures")
	fmt.Println("   ‚Ä¢ Conditional sections")
	fmt.Println("   ‚Ä¢ Dynamic content generation")
	fmt.Println()

	// Try to load the enhanced config to show complex data support
	cfg, err := configService.LoadConfiguration(ctx, "../../configs/enhanced-sample-config.yaml")
	if err == nil {
		fmt.Println("   ‚úì Enhanced config loaded successfully")
		fmt.Printf("   ‚úì Variables include: company, team, legal_document, etc.\n")
		fmt.Printf("   ‚úì Nested depth: 4+ levels\n")
		fmt.Printf("   ‚úì Arrays: team members, proceedings, damages breakdown\n")
	}
	_ = cfg
}

func demonstrateConversionStrategies(
	conversionService domain.ConversionService,
	pdfService domain.PDFGenerationService,
	ctx context.Context,
) {
	// Get supported formats
	formats := conversionService.GetSupportedFormats()
	fmt.Printf("   Supported formats: %v\n", formats)

	// Show strategy pattern in action
	fmt.Println("   ‚úì Multiple conversion engines available")
	fmt.Println("   ‚úì Automatic fallback if one engine fails")
	fmt.Println("   ‚úì Strategy selected based on availability")
	fmt.Println("   ‚úì Easy to add new conversion strategies")
}

// RunShowcase is the main entry point for the showcase
func RunShowcase() {
	log.SetFlags(0) // Disable log timestamps for cleaner output
	ShowcaseSOLIDDDDArchitecture()
}
