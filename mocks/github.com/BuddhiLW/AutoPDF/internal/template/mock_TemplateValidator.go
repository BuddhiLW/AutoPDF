// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockTemplateValidator is an autogenerated mock type for the TemplateValidator type
type MockTemplateValidator struct {
	mock.Mock
}

type MockTemplateValidator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTemplateValidator) EXPECT() *MockTemplateValidator_Expecter {
	return &MockTemplateValidator_Expecter{mock: &_m.Mock}
}

// ValidateSyntax provides a mock function with given fields: templateContent
func (_m *MockTemplateValidator) ValidateSyntax(templateContent string) error {
	ret := _m.Called(templateContent)

	if len(ret) == 0 {
		panic("no return value specified for ValidateSyntax")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(templateContent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTemplateValidator_ValidateSyntax_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateSyntax'
type MockTemplateValidator_ValidateSyntax_Call struct {
	*mock.Call
}

// ValidateSyntax is a helper method to define mock.On call
//   - templateContent string
func (_e *MockTemplateValidator_Expecter) ValidateSyntax(templateContent interface{}) *MockTemplateValidator_ValidateSyntax_Call {
	return &MockTemplateValidator_ValidateSyntax_Call{Call: _e.mock.On("ValidateSyntax", templateContent)}
}

func (_c *MockTemplateValidator_ValidateSyntax_Call) Run(run func(templateContent string)) *MockTemplateValidator_ValidateSyntax_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTemplateValidator_ValidateSyntax_Call) Return(_a0 error) *MockTemplateValidator_ValidateSyntax_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTemplateValidator_ValidateSyntax_Call) RunAndReturn(run func(string) error) *MockTemplateValidator_ValidateSyntax_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateTemplate provides a mock function with given fields: templatePath
func (_m *MockTemplateValidator) ValidateTemplate(templatePath string) error {
	ret := _m.Called(templatePath)

	if len(ret) == 0 {
		panic("no return value specified for ValidateTemplate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(templatePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTemplateValidator_ValidateTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateTemplate'
type MockTemplateValidator_ValidateTemplate_Call struct {
	*mock.Call
}

// ValidateTemplate is a helper method to define mock.On call
//   - templatePath string
func (_e *MockTemplateValidator_Expecter) ValidateTemplate(templatePath interface{}) *MockTemplateValidator_ValidateTemplate_Call {
	return &MockTemplateValidator_ValidateTemplate_Call{Call: _e.mock.On("ValidateTemplate", templatePath)}
}

func (_c *MockTemplateValidator_ValidateTemplate_Call) Run(run func(templatePath string)) *MockTemplateValidator_ValidateTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTemplateValidator_ValidateTemplate_Call) Return(_a0 error) *MockTemplateValidator_ValidateTemplate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTemplateValidator_ValidateTemplate_Call) RunAndReturn(run func(string) error) *MockTemplateValidator_ValidateTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateVariables provides a mock function with given fields: templateContent, variables
func (_m *MockTemplateValidator) ValidateVariables(templateContent string, variables map[string]interface{}) error {
	ret := _m.Called(templateContent, variables)

	if len(ret) == 0 {
		panic("no return value specified for ValidateVariables")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, map[string]interface{}) error); ok {
		r0 = rf(templateContent, variables)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTemplateValidator_ValidateVariables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateVariables'
type MockTemplateValidator_ValidateVariables_Call struct {
	*mock.Call
}

// ValidateVariables is a helper method to define mock.On call
//   - templateContent string
//   - variables map[string]interface{}
func (_e *MockTemplateValidator_Expecter) ValidateVariables(templateContent interface{}, variables interface{}) *MockTemplateValidator_ValidateVariables_Call {
	return &MockTemplateValidator_ValidateVariables_Call{Call: _e.mock.On("ValidateVariables", templateContent, variables)}
}

func (_c *MockTemplateValidator_ValidateVariables_Call) Run(run func(templateContent string, variables map[string]interface{})) *MockTemplateValidator_ValidateVariables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(map[string]interface{}))
	})
	return _c
}

func (_c *MockTemplateValidator_ValidateVariables_Call) Return(_a0 error) *MockTemplateValidator_ValidateVariables_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTemplateValidator_ValidateVariables_Call) RunAndReturn(run func(string, map[string]interface{}) error) *MockTemplateValidator_ValidateVariables_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTemplateValidator creates a new instance of MockTemplateValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTemplateValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTemplateValidator {
	mock := &MockTemplateValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
