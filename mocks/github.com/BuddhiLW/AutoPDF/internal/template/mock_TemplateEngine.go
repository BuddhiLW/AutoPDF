// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockTemplateEngine is an autogenerated mock type for the TemplateEngine type
type MockTemplateEngine struct {
	mock.Mock
}

type MockTemplateEngine_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTemplateEngine) EXPECT() *MockTemplateEngine_Expecter {
	return &MockTemplateEngine_Expecter{mock: &_m.Mock}
}

// AddFunction provides a mock function with given fields: name, fn
func (_m *MockTemplateEngine) AddFunction(name string, fn interface{}) {
	_m.Called(name, fn)
}

// MockTemplateEngine_AddFunction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFunction'
type MockTemplateEngine_AddFunction_Call struct {
	*mock.Call
}

// AddFunction is a helper method to define mock.On call
//   - name string
//   - fn interface{}
func (_e *MockTemplateEngine_Expecter) AddFunction(name interface{}, fn interface{}) *MockTemplateEngine_AddFunction_Call {
	return &MockTemplateEngine_AddFunction_Call{Call: _e.mock.On("AddFunction", name, fn)}
}

func (_c *MockTemplateEngine_AddFunction_Call) Run(run func(name string, fn interface{})) *MockTemplateEngine_AddFunction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MockTemplateEngine_AddFunction_Call) Return() *MockTemplateEngine_AddFunction_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTemplateEngine_AddFunction_Call) RunAndReturn(run func(string, interface{})) *MockTemplateEngine_AddFunction_Call {
	_c.Run(run)
	return _c
}

// Process provides a mock function with given fields: templatePath
func (_m *MockTemplateEngine) Process(templatePath string) (string, error) {
	ret := _m.Called(templatePath)

	if len(ret) == 0 {
		panic("no return value specified for Process")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(templatePath)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(templatePath)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(templatePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTemplateEngine_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type MockTemplateEngine_Process_Call struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - templatePath string
func (_e *MockTemplateEngine_Expecter) Process(templatePath interface{}) *MockTemplateEngine_Process_Call {
	return &MockTemplateEngine_Process_Call{Call: _e.mock.On("Process", templatePath)}
}

func (_c *MockTemplateEngine_Process_Call) Run(run func(templatePath string)) *MockTemplateEngine_Process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTemplateEngine_Process_Call) Return(_a0 string, _a1 error) *MockTemplateEngine_Process_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTemplateEngine_Process_Call) RunAndReturn(run func(string) (string, error)) *MockTemplateEngine_Process_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessToFile provides a mock function with given fields: templatePath, outputPath
func (_m *MockTemplateEngine) ProcessToFile(templatePath string, outputPath string) error {
	ret := _m.Called(templatePath, outputPath)

	if len(ret) == 0 {
		panic("no return value specified for ProcessToFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(templatePath, outputPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTemplateEngine_ProcessToFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessToFile'
type MockTemplateEngine_ProcessToFile_Call struct {
	*mock.Call
}

// ProcessToFile is a helper method to define mock.On call
//   - templatePath string
//   - outputPath string
func (_e *MockTemplateEngine_Expecter) ProcessToFile(templatePath interface{}, outputPath interface{}) *MockTemplateEngine_ProcessToFile_Call {
	return &MockTemplateEngine_ProcessToFile_Call{Call: _e.mock.On("ProcessToFile", templatePath, outputPath)}
}

func (_c *MockTemplateEngine_ProcessToFile_Call) Run(run func(templatePath string, outputPath string)) *MockTemplateEngine_ProcessToFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockTemplateEngine_ProcessToFile_Call) Return(_a0 error) *MockTemplateEngine_ProcessToFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTemplateEngine_ProcessToFile_Call) RunAndReturn(run func(string, string) error) *MockTemplateEngine_ProcessToFile_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateTemplate provides a mock function with given fields: templatePath
func (_m *MockTemplateEngine) ValidateTemplate(templatePath string) error {
	ret := _m.Called(templatePath)

	if len(ret) == 0 {
		panic("no return value specified for ValidateTemplate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(templatePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTemplateEngine_ValidateTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateTemplate'
type MockTemplateEngine_ValidateTemplate_Call struct {
	*mock.Call
}

// ValidateTemplate is a helper method to define mock.On call
//   - templatePath string
func (_e *MockTemplateEngine_Expecter) ValidateTemplate(templatePath interface{}) *MockTemplateEngine_ValidateTemplate_Call {
	return &MockTemplateEngine_ValidateTemplate_Call{Call: _e.mock.On("ValidateTemplate", templatePath)}
}

func (_c *MockTemplateEngine_ValidateTemplate_Call) Run(run func(templatePath string)) *MockTemplateEngine_ValidateTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTemplateEngine_ValidateTemplate_Call) Return(_a0 error) *MockTemplateEngine_ValidateTemplate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTemplateEngine_ValidateTemplate_Call) RunAndReturn(run func(string) error) *MockTemplateEngine_ValidateTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTemplateEngine creates a new instance of MockTemplateEngine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTemplateEngine(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTemplateEngine {
	mock := &MockTemplateEngine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
