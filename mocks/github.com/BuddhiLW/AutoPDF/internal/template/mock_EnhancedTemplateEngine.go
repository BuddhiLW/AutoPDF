// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	domain "github.com/BuddhiLW/AutoPDF/pkg/domain"
	mock "github.com/stretchr/testify/mock"

	template "github.com/BuddhiLW/AutoPDF/internal/template"
)

// MockEnhancedTemplateEngine is an autogenerated mock type for the EnhancedTemplateEngine type
type MockEnhancedTemplateEngine struct {
	mock.Mock
}

type MockEnhancedTemplateEngine_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEnhancedTemplateEngine) EXPECT() *MockEnhancedTemplateEngine_Expecter {
	return &MockEnhancedTemplateEngine_Expecter{mock: &_m.Mock}
}

// AddFunction provides a mock function with given fields: name, fn
func (_m *MockEnhancedTemplateEngine) AddFunction(name string, fn interface{}) {
	_m.Called(name, fn)
}

// MockEnhancedTemplateEngine_AddFunction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFunction'
type MockEnhancedTemplateEngine_AddFunction_Call struct {
	*mock.Call
}

// AddFunction is a helper method to define mock.On call
//   - name string
//   - fn interface{}
func (_e *MockEnhancedTemplateEngine_Expecter) AddFunction(name interface{}, fn interface{}) *MockEnhancedTemplateEngine_AddFunction_Call {
	return &MockEnhancedTemplateEngine_AddFunction_Call{Call: _e.mock.On("AddFunction", name, fn)}
}

func (_c *MockEnhancedTemplateEngine_AddFunction_Call) Run(run func(name string, fn interface{})) *MockEnhancedTemplateEngine_AddFunction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MockEnhancedTemplateEngine_AddFunction_Call) Return() *MockEnhancedTemplateEngine_AddFunction_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEnhancedTemplateEngine_AddFunction_Call) RunAndReturn(run func(string, interface{})) *MockEnhancedTemplateEngine_AddFunction_Call {
	_c.Run(run)
	return _c
}

// Clone provides a mock function with no fields
func (_m *MockEnhancedTemplateEngine) Clone() template.EnhancedTemplateEngine {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Clone")
	}

	var r0 template.EnhancedTemplateEngine
	if rf, ok := ret.Get(0).(func() template.EnhancedTemplateEngine); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(template.EnhancedTemplateEngine)
		}
	}

	return r0
}

// MockEnhancedTemplateEngine_Clone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clone'
type MockEnhancedTemplateEngine_Clone_Call struct {
	*mock.Call
}

// Clone is a helper method to define mock.On call
func (_e *MockEnhancedTemplateEngine_Expecter) Clone() *MockEnhancedTemplateEngine_Clone_Call {
	return &MockEnhancedTemplateEngine_Clone_Call{Call: _e.mock.On("Clone")}
}

func (_c *MockEnhancedTemplateEngine_Clone_Call) Run(run func()) *MockEnhancedTemplateEngine_Clone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnhancedTemplateEngine_Clone_Call) Return(_a0 template.EnhancedTemplateEngine) *MockEnhancedTemplateEngine_Clone_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnhancedTemplateEngine_Clone_Call) RunAndReturn(run func() template.EnhancedTemplateEngine) *MockEnhancedTemplateEngine_Clone_Call {
	_c.Call.Return(run)
	return _c
}

// GetVariable provides a mock function with given fields: key
func (_m *MockEnhancedTemplateEngine) GetVariable(key string) (*domain.Variable, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetVariable")
	}

	var r0 *domain.Variable
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Variable, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Variable); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Variable)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnhancedTemplateEngine_GetVariable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVariable'
type MockEnhancedTemplateEngine_GetVariable_Call struct {
	*mock.Call
}

// GetVariable is a helper method to define mock.On call
//   - key string
func (_e *MockEnhancedTemplateEngine_Expecter) GetVariable(key interface{}) *MockEnhancedTemplateEngine_GetVariable_Call {
	return &MockEnhancedTemplateEngine_GetVariable_Call{Call: _e.mock.On("GetVariable", key)}
}

func (_c *MockEnhancedTemplateEngine_GetVariable_Call) Run(run func(key string)) *MockEnhancedTemplateEngine_GetVariable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockEnhancedTemplateEngine_GetVariable_Call) Return(_a0 *domain.Variable, _a1 error) *MockEnhancedTemplateEngine_GetVariable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnhancedTemplateEngine_GetVariable_Call) RunAndReturn(run func(string) (*domain.Variable, error)) *MockEnhancedTemplateEngine_GetVariable_Call {
	_c.Call.Return(run)
	return _c
}

// Process provides a mock function with given fields: templatePath
func (_m *MockEnhancedTemplateEngine) Process(templatePath string) (string, error) {
	ret := _m.Called(templatePath)

	if len(ret) == 0 {
		panic("no return value specified for Process")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(templatePath)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(templatePath)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(templatePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnhancedTemplateEngine_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type MockEnhancedTemplateEngine_Process_Call struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - templatePath string
func (_e *MockEnhancedTemplateEngine_Expecter) Process(templatePath interface{}) *MockEnhancedTemplateEngine_Process_Call {
	return &MockEnhancedTemplateEngine_Process_Call{Call: _e.mock.On("Process", templatePath)}
}

func (_c *MockEnhancedTemplateEngine_Process_Call) Run(run func(templatePath string)) *MockEnhancedTemplateEngine_Process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockEnhancedTemplateEngine_Process_Call) Return(_a0 string, _a1 error) *MockEnhancedTemplateEngine_Process_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnhancedTemplateEngine_Process_Call) RunAndReturn(run func(string) (string, error)) *MockEnhancedTemplateEngine_Process_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessToFile provides a mock function with given fields: templatePath, outputPath
func (_m *MockEnhancedTemplateEngine) ProcessToFile(templatePath string, outputPath string) error {
	ret := _m.Called(templatePath, outputPath)

	if len(ret) == 0 {
		panic("no return value specified for ProcessToFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(templatePath, outputPath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEnhancedTemplateEngine_ProcessToFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessToFile'
type MockEnhancedTemplateEngine_ProcessToFile_Call struct {
	*mock.Call
}

// ProcessToFile is a helper method to define mock.On call
//   - templatePath string
//   - outputPath string
func (_e *MockEnhancedTemplateEngine_Expecter) ProcessToFile(templatePath interface{}, outputPath interface{}) *MockEnhancedTemplateEngine_ProcessToFile_Call {
	return &MockEnhancedTemplateEngine_ProcessToFile_Call{Call: _e.mock.On("ProcessToFile", templatePath, outputPath)}
}

func (_c *MockEnhancedTemplateEngine_ProcessToFile_Call) Run(run func(templatePath string, outputPath string)) *MockEnhancedTemplateEngine_ProcessToFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockEnhancedTemplateEngine_ProcessToFile_Call) Return(_a0 error) *MockEnhancedTemplateEngine_ProcessToFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnhancedTemplateEngine_ProcessToFile_Call) RunAndReturn(run func(string, string) error) *MockEnhancedTemplateEngine_ProcessToFile_Call {
	_c.Call.Return(run)
	return _c
}

// SetVariable provides a mock function with given fields: key, value
func (_m *MockEnhancedTemplateEngine) SetVariable(key string, value interface{}) error {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for SetVariable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEnhancedTemplateEngine_SetVariable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetVariable'
type MockEnhancedTemplateEngine_SetVariable_Call struct {
	*mock.Call
}

// SetVariable is a helper method to define mock.On call
//   - key string
//   - value interface{}
func (_e *MockEnhancedTemplateEngine_Expecter) SetVariable(key interface{}, value interface{}) *MockEnhancedTemplateEngine_SetVariable_Call {
	return &MockEnhancedTemplateEngine_SetVariable_Call{Call: _e.mock.On("SetVariable", key, value)}
}

func (_c *MockEnhancedTemplateEngine_SetVariable_Call) Run(run func(key string, value interface{})) *MockEnhancedTemplateEngine_SetVariable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MockEnhancedTemplateEngine_SetVariable_Call) Return(_a0 error) *MockEnhancedTemplateEngine_SetVariable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnhancedTemplateEngine_SetVariable_Call) RunAndReturn(run func(string, interface{}) error) *MockEnhancedTemplateEngine_SetVariable_Call {
	_c.Call.Return(run)
	return _c
}

// SetVariablesFromMap provides a mock function with given fields: variables
func (_m *MockEnhancedTemplateEngine) SetVariablesFromMap(variables map[string]interface{}) error {
	ret := _m.Called(variables)

	if len(ret) == 0 {
		panic("no return value specified for SetVariablesFromMap")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) error); ok {
		r0 = rf(variables)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEnhancedTemplateEngine_SetVariablesFromMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetVariablesFromMap'
type MockEnhancedTemplateEngine_SetVariablesFromMap_Call struct {
	*mock.Call
}

// SetVariablesFromMap is a helper method to define mock.On call
//   - variables map[string]interface{}
func (_e *MockEnhancedTemplateEngine_Expecter) SetVariablesFromMap(variables interface{}) *MockEnhancedTemplateEngine_SetVariablesFromMap_Call {
	return &MockEnhancedTemplateEngine_SetVariablesFromMap_Call{Call: _e.mock.On("SetVariablesFromMap", variables)}
}

func (_c *MockEnhancedTemplateEngine_SetVariablesFromMap_Call) Run(run func(variables map[string]interface{})) *MockEnhancedTemplateEngine_SetVariablesFromMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]interface{}))
	})
	return _c
}

func (_c *MockEnhancedTemplateEngine_SetVariablesFromMap_Call) Return(_a0 error) *MockEnhancedTemplateEngine_SetVariablesFromMap_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnhancedTemplateEngine_SetVariablesFromMap_Call) RunAndReturn(run func(map[string]interface{}) error) *MockEnhancedTemplateEngine_SetVariablesFromMap_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateTemplate provides a mock function with given fields: templatePath
func (_m *MockEnhancedTemplateEngine) ValidateTemplate(templatePath string) error {
	ret := _m.Called(templatePath)

	if len(ret) == 0 {
		panic("no return value specified for ValidateTemplate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(templatePath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockEnhancedTemplateEngine_ValidateTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateTemplate'
type MockEnhancedTemplateEngine_ValidateTemplate_Call struct {
	*mock.Call
}

// ValidateTemplate is a helper method to define mock.On call
//   - templatePath string
func (_e *MockEnhancedTemplateEngine_Expecter) ValidateTemplate(templatePath interface{}) *MockEnhancedTemplateEngine_ValidateTemplate_Call {
	return &MockEnhancedTemplateEngine_ValidateTemplate_Call{Call: _e.mock.On("ValidateTemplate", templatePath)}
}

func (_c *MockEnhancedTemplateEngine_ValidateTemplate_Call) Run(run func(templatePath string)) *MockEnhancedTemplateEngine_ValidateTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockEnhancedTemplateEngine_ValidateTemplate_Call) Return(_a0 error) *MockEnhancedTemplateEngine_ValidateTemplate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnhancedTemplateEngine_ValidateTemplate_Call) RunAndReturn(run func(string) error) *MockEnhancedTemplateEngine_ValidateTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEnhancedTemplateEngine creates a new instance of MockEnhancedTemplateEngine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEnhancedTemplateEngine(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEnhancedTemplateEngine {
	mock := &MockEnhancedTemplateEngine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
