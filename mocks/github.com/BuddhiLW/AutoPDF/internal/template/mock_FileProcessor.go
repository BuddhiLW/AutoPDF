// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockFileProcessor is an autogenerated mock type for the FileProcessor type
type MockFileProcessor struct {
	mock.Mock
}

type MockFileProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFileProcessor) EXPECT() *MockFileProcessor_Expecter {
	return &MockFileProcessor_Expecter{mock: &_m.Mock}
}

// CreateDirectory provides a mock function with given fields: path
func (_m *MockFileProcessor) CreateDirectory(path string) error {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for CreateDirectory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFileProcessor_CreateDirectory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDirectory'
type MockFileProcessor_CreateDirectory_Call struct {
	*mock.Call
}

// CreateDirectory is a helper method to define mock.On call
//   - path string
func (_e *MockFileProcessor_Expecter) CreateDirectory(path interface{}) *MockFileProcessor_CreateDirectory_Call {
	return &MockFileProcessor_CreateDirectory_Call{Call: _e.mock.On("CreateDirectory", path)}
}

func (_c *MockFileProcessor_CreateDirectory_Call) Run(run func(path string)) *MockFileProcessor_CreateDirectory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFileProcessor_CreateDirectory_Call) Return(_a0 error) *MockFileProcessor_CreateDirectory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFileProcessor_CreateDirectory_Call) RunAndReturn(run func(string) error) *MockFileProcessor_CreateDirectory_Call {
	_c.Call.Return(run)
	return _c
}

// FileExists provides a mock function with given fields: path
func (_m *MockFileProcessor) FileExists(path string) bool {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for FileExists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockFileProcessor_FileExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FileExists'
type MockFileProcessor_FileExists_Call struct {
	*mock.Call
}

// FileExists is a helper method to define mock.On call
//   - path string
func (_e *MockFileProcessor_Expecter) FileExists(path interface{}) *MockFileProcessor_FileExists_Call {
	return &MockFileProcessor_FileExists_Call{Call: _e.mock.On("FileExists", path)}
}

func (_c *MockFileProcessor_FileExists_Call) Run(run func(path string)) *MockFileProcessor_FileExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFileProcessor_FileExists_Call) Return(_a0 bool) *MockFileProcessor_FileExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFileProcessor_FileExists_Call) RunAndReturn(run func(string) bool) *MockFileProcessor_FileExists_Call {
	_c.Call.Return(run)
	return _c
}

// ReadFile provides a mock function with given fields: path
func (_m *MockFileProcessor) ReadFile(path string) ([]byte, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for ReadFile")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFileProcessor_ReadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFile'
type MockFileProcessor_ReadFile_Call struct {
	*mock.Call
}

// ReadFile is a helper method to define mock.On call
//   - path string
func (_e *MockFileProcessor_Expecter) ReadFile(path interface{}) *MockFileProcessor_ReadFile_Call {
	return &MockFileProcessor_ReadFile_Call{Call: _e.mock.On("ReadFile", path)}
}

func (_c *MockFileProcessor_ReadFile_Call) Run(run func(path string)) *MockFileProcessor_ReadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFileProcessor_ReadFile_Call) Return(_a0 []byte, _a1 error) *MockFileProcessor_ReadFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFileProcessor_ReadFile_Call) RunAndReturn(run func(string) ([]byte, error)) *MockFileProcessor_ReadFile_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveFile provides a mock function with given fields: path
func (_m *MockFileProcessor) RemoveFile(path string) error {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for RemoveFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFileProcessor_RemoveFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveFile'
type MockFileProcessor_RemoveFile_Call struct {
	*mock.Call
}

// RemoveFile is a helper method to define mock.On call
//   - path string
func (_e *MockFileProcessor_Expecter) RemoveFile(path interface{}) *MockFileProcessor_RemoveFile_Call {
	return &MockFileProcessor_RemoveFile_Call{Call: _e.mock.On("RemoveFile", path)}
}

func (_c *MockFileProcessor_RemoveFile_Call) Run(run func(path string)) *MockFileProcessor_RemoveFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFileProcessor_RemoveFile_Call) Return(_a0 error) *MockFileProcessor_RemoveFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFileProcessor_RemoveFile_Call) RunAndReturn(run func(string) error) *MockFileProcessor_RemoveFile_Call {
	_c.Call.Return(run)
	return _c
}

// WriteFile provides a mock function with given fields: path, content
func (_m *MockFileProcessor) WriteFile(path string, content []byte) error {
	ret := _m.Called(path, content)

	if len(ret) == 0 {
		panic("no return value specified for WriteFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = rf(path, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFileProcessor_WriteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteFile'
type MockFileProcessor_WriteFile_Call struct {
	*mock.Call
}

// WriteFile is a helper method to define mock.On call
//   - path string
//   - content []byte
func (_e *MockFileProcessor_Expecter) WriteFile(path interface{}, content interface{}) *MockFileProcessor_WriteFile_Call {
	return &MockFileProcessor_WriteFile_Call{Call: _e.mock.On("WriteFile", path, content)}
}

func (_c *MockFileProcessor_WriteFile_Call) Run(run func(path string, content []byte)) *MockFileProcessor_WriteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte))
	})
	return _c
}

func (_c *MockFileProcessor_WriteFile_Call) Return(_a0 error) *MockFileProcessor_WriteFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFileProcessor_WriteFile_Call) RunAndReturn(run func(string, []byte) error) *MockFileProcessor_WriteFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFileProcessor creates a new instance of MockFileProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFileProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFileProcessor {
	mock := &MockFileProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
