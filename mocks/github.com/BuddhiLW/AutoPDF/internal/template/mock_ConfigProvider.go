// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	config "github.com/BuddhiLW/AutoPDF/pkg/config"
	mock "github.com/stretchr/testify/mock"
)

// MockConfigProvider is an autogenerated mock type for the ConfigProvider type
type MockConfigProvider struct {
	mock.Mock
}

type MockConfigProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigProvider) EXPECT() *MockConfigProvider_Expecter {
	return &MockConfigProvider_Expecter{mock: &_m.Mock}
}

// GetConfig provides a mock function with no fields
func (_m *MockConfigProvider) GetConfig() *config.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 *config.Config
	if rf, ok := ret.Get(0).(func() *config.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.Config)
		}
	}

	return r0
}

// MockConfigProvider_GetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfig'
type MockConfigProvider_GetConfig_Call struct {
	*mock.Call
}

// GetConfig is a helper method to define mock.On call
func (_e *MockConfigProvider_Expecter) GetConfig() *MockConfigProvider_GetConfig_Call {
	return &MockConfigProvider_GetConfig_Call{Call: _e.mock.On("GetConfig")}
}

func (_c *MockConfigProvider_GetConfig_Call) Run(run func()) *MockConfigProvider_GetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigProvider_GetConfig_Call) Return(_a0 *config.Config) *MockConfigProvider_GetConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigProvider_GetConfig_Call) RunAndReturn(run func() *config.Config) *MockConfigProvider_GetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultConfig provides a mock function with no fields
func (_m *MockConfigProvider) GetDefaultConfig() *config.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultConfig")
	}

	var r0 *config.Config
	if rf, ok := ret.Get(0).(func() *config.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.Config)
		}
	}

	return r0
}

// MockConfigProvider_GetDefaultConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultConfig'
type MockConfigProvider_GetDefaultConfig_Call struct {
	*mock.Call
}

// GetDefaultConfig is a helper method to define mock.On call
func (_e *MockConfigProvider_Expecter) GetDefaultConfig() *MockConfigProvider_GetDefaultConfig_Call {
	return &MockConfigProvider_GetDefaultConfig_Call{Call: _e.mock.On("GetDefaultConfig")}
}

func (_c *MockConfigProvider_GetDefaultConfig_Call) Run(run func()) *MockConfigProvider_GetDefaultConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigProvider_GetDefaultConfig_Call) Return(_a0 *config.Config) *MockConfigProvider_GetDefaultConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigProvider_GetDefaultConfig_Call) RunAndReturn(run func() *config.Config) *MockConfigProvider_GetDefaultConfig_Call {
	_c.Call.Return(run)
	return _c
}

// LoadConfigFromFile provides a mock function with given fields: path
func (_m *MockConfigProvider) LoadConfigFromFile(path string) (*config.Config, error) {
	ret := _m.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for LoadConfigFromFile")
	}

	var r0 *config.Config
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*config.Config, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(string) *config.Config); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.Config)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockConfigProvider_LoadConfigFromFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadConfigFromFile'
type MockConfigProvider_LoadConfigFromFile_Call struct {
	*mock.Call
}

// LoadConfigFromFile is a helper method to define mock.On call
//   - path string
func (_e *MockConfigProvider_Expecter) LoadConfigFromFile(path interface{}) *MockConfigProvider_LoadConfigFromFile_Call {
	return &MockConfigProvider_LoadConfigFromFile_Call{Call: _e.mock.On("LoadConfigFromFile", path)}
}

func (_c *MockConfigProvider_LoadConfigFromFile_Call) Run(run func(path string)) *MockConfigProvider_LoadConfigFromFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockConfigProvider_LoadConfigFromFile_Call) Return(_a0 *config.Config, _a1 error) *MockConfigProvider_LoadConfigFromFile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockConfigProvider_LoadConfigFromFile_Call) RunAndReturn(run func(string) (*config.Config, error)) *MockConfigProvider_LoadConfigFromFile_Call {
	_c.Call.Return(run)
	return _c
}

// SaveConfigToFile provides a mock function with given fields: cfg, path
func (_m *MockConfigProvider) SaveConfigToFile(cfg *config.Config, path string) error {
	ret := _m.Called(cfg, path)

	if len(ret) == 0 {
		panic("no return value specified for SaveConfigToFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*config.Config, string) error); ok {
		r0 = rf(cfg, path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockConfigProvider_SaveConfigToFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveConfigToFile'
type MockConfigProvider_SaveConfigToFile_Call struct {
	*mock.Call
}

// SaveConfigToFile is a helper method to define mock.On call
//   - cfg *config.Config
//   - path string
func (_e *MockConfigProvider_Expecter) SaveConfigToFile(cfg interface{}, path interface{}) *MockConfigProvider_SaveConfigToFile_Call {
	return &MockConfigProvider_SaveConfigToFile_Call{Call: _e.mock.On("SaveConfigToFile", cfg, path)}
}

func (_c *MockConfigProvider_SaveConfigToFile_Call) Run(run func(cfg *config.Config, path string)) *MockConfigProvider_SaveConfigToFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*config.Config), args[1].(string))
	})
	return _c
}

func (_c *MockConfigProvider_SaveConfigToFile_Call) Return(_a0 error) *MockConfigProvider_SaveConfigToFile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfigProvider_SaveConfigToFile_Call) RunAndReturn(run func(*config.Config, string) error) *MockConfigProvider_SaveConfigToFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConfigProvider creates a new instance of MockConfigProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigProvider {
	mock := &MockConfigProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
