// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	domain "github.com/BuddhiLW/AutoPDF/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockVariableProcessor is an autogenerated mock type for the VariableProcessor type
type MockVariableProcessor struct {
	mock.Mock
}

type MockVariableProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVariableProcessor) EXPECT() *MockVariableProcessor_Expecter {
	return &MockVariableProcessor_Expecter{mock: &_m.Mock}
}

// GetNested provides a mock function with given fields: key
func (_m *MockVariableProcessor) GetNested(key string) (*domain.Variable, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetNested")
	}

	var r0 *domain.Variable
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Variable, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Variable); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Variable)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVariableProcessor_GetNested_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNested'
type MockVariableProcessor_GetNested_Call struct {
	*mock.Call
}

// GetNested is a helper method to define mock.On call
//   - key string
func (_e *MockVariableProcessor_Expecter) GetNested(key interface{}) *MockVariableProcessor_GetNested_Call {
	return &MockVariableProcessor_GetNested_Call{Call: _e.mock.On("GetNested", key)}
}

func (_c *MockVariableProcessor_GetNested_Call) Run(run func(key string)) *MockVariableProcessor_GetNested_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockVariableProcessor_GetNested_Call) Return(_a0 *domain.Variable, _a1 error) *MockVariableProcessor_GetNested_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVariableProcessor_GetNested_Call) RunAndReturn(run func(string) (*domain.Variable, error)) *MockVariableProcessor_GetNested_Call {
	_c.Call.Return(run)
	return _c
}

// GetVariable provides a mock function with given fields: key
func (_m *MockVariableProcessor) GetVariable(key string) (*domain.Variable, error) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetVariable")
	}

	var r0 *domain.Variable
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Variable, error)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Variable); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Variable)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVariableProcessor_GetVariable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVariable'
type MockVariableProcessor_GetVariable_Call struct {
	*mock.Call
}

// GetVariable is a helper method to define mock.On call
//   - key string
func (_e *MockVariableProcessor_Expecter) GetVariable(key interface{}) *MockVariableProcessor_GetVariable_Call {
	return &MockVariableProcessor_GetVariable_Call{Call: _e.mock.On("GetVariable", key)}
}

func (_c *MockVariableProcessor_GetVariable_Call) Run(run func(key string)) *MockVariableProcessor_GetVariable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockVariableProcessor_GetVariable_Call) Return(_a0 *domain.Variable, _a1 error) *MockVariableProcessor_GetVariable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVariableProcessor_GetVariable_Call) RunAndReturn(run func(string) (*domain.Variable, error)) *MockVariableProcessor_GetVariable_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessVariables provides a mock function with given fields: variables
func (_m *MockVariableProcessor) ProcessVariables(variables map[string]interface{}) (*domain.VariableCollection, error) {
	ret := _m.Called(variables)

	if len(ret) == 0 {
		panic("no return value specified for ProcessVariables")
	}

	var r0 *domain.VariableCollection
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) (*domain.VariableCollection, error)); ok {
		return rf(variables)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}) *domain.VariableCollection); ok {
		r0 = rf(variables)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.VariableCollection)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(variables)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVariableProcessor_ProcessVariables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessVariables'
type MockVariableProcessor_ProcessVariables_Call struct {
	*mock.Call
}

// ProcessVariables is a helper method to define mock.On call
//   - variables map[string]interface{}
func (_e *MockVariableProcessor_Expecter) ProcessVariables(variables interface{}) *MockVariableProcessor_ProcessVariables_Call {
	return &MockVariableProcessor_ProcessVariables_Call{Call: _e.mock.On("ProcessVariables", variables)}
}

func (_c *MockVariableProcessor_ProcessVariables_Call) Run(run func(variables map[string]interface{})) *MockVariableProcessor_ProcessVariables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]interface{}))
	})
	return _c
}

func (_c *MockVariableProcessor_ProcessVariables_Call) Return(_a0 *domain.VariableCollection, _a1 error) *MockVariableProcessor_ProcessVariables_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVariableProcessor_ProcessVariables_Call) RunAndReturn(run func(map[string]interface{}) (*domain.VariableCollection, error)) *MockVariableProcessor_ProcessVariables_Call {
	_c.Call.Return(run)
	return _c
}

// SetVariable provides a mock function with given fields: key, value
func (_m *MockVariableProcessor) SetVariable(key string, value interface{}) error {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for SetVariable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockVariableProcessor_SetVariable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetVariable'
type MockVariableProcessor_SetVariable_Call struct {
	*mock.Call
}

// SetVariable is a helper method to define mock.On call
//   - key string
//   - value interface{}
func (_e *MockVariableProcessor_Expecter) SetVariable(key interface{}, value interface{}) *MockVariableProcessor_SetVariable_Call {
	return &MockVariableProcessor_SetVariable_Call{Call: _e.mock.On("SetVariable", key, value)}
}

func (_c *MockVariableProcessor_SetVariable_Call) Run(run func(key string, value interface{})) *MockVariableProcessor_SetVariable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *MockVariableProcessor_SetVariable_Call) Return(_a0 error) *MockVariableProcessor_SetVariable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVariableProcessor_SetVariable_Call) RunAndReturn(run func(string, interface{}) error) *MockVariableProcessor_SetVariable_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVariableProcessor creates a new instance of MockVariableProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVariableProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVariableProcessor {
	mock := &MockVariableProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
