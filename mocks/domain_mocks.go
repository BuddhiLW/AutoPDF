// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/BuddhiLW/AutoPDF/internal/autopdf/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockDomainEventPublisher creates a new instance of MockDomainEventPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDomainEventPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDomainEventPublisher {
	mock := &MockDomainEventPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDomainEventPublisher is an autogenerated mock type for the EventPublisher type
type MockDomainEventPublisher struct {
	mock.Mock
}

type MockDomainEventPublisher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDomainEventPublisher) EXPECT() *MockDomainEventPublisher_Expecter {
	return &MockDomainEventPublisher_Expecter{mock: &_m.Mock}
}

// Publish provides a mock function for the type MockDomainEventPublisher
func (_mock *MockDomainEventPublisher) Publish(event domain.Event) error {
	ret := _mock.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(domain.Event) error); ok {
		r0 = returnFunc(event)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDomainEventPublisher_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockDomainEventPublisher_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - event domain.Event
func (_e *MockDomainEventPublisher_Expecter) Publish(event interface{}) *MockDomainEventPublisher_Publish_Call {
	return &MockDomainEventPublisher_Publish_Call{Call: _e.mock.On("Publish", event)}
}

func (_c *MockDomainEventPublisher_Publish_Call) Run(run func(event domain.Event)) *MockDomainEventPublisher_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.Event
		if args[0] != nil {
			arg0 = args[0].(domain.Event)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDomainEventPublisher_Publish_Call) Return(err error) *MockDomainEventPublisher_Publish_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDomainEventPublisher_Publish_Call) RunAndReturn(run func(event domain.Event) error) *MockDomainEventPublisher_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function for the type MockDomainEventPublisher
func (_mock *MockDomainEventPublisher) Subscribe(eventType string, handler domain.EventHandler) error {
	ret := _mock.Called(eventType, handler)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, domain.EventHandler) error); ok {
		r0 = returnFunc(eventType, handler)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDomainEventPublisher_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockDomainEventPublisher_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - eventType string
//   - handler domain.EventHandler
func (_e *MockDomainEventPublisher_Expecter) Subscribe(eventType interface{}, handler interface{}) *MockDomainEventPublisher_Subscribe_Call {
	return &MockDomainEventPublisher_Subscribe_Call{Call: _e.mock.On("Subscribe", eventType, handler)}
}

func (_c *MockDomainEventPublisher_Subscribe_Call) Run(run func(eventType string, handler domain.EventHandler)) *MockDomainEventPublisher_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 domain.EventHandler
		if args[1] != nil {
			arg1 = args[1].(domain.EventHandler)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomainEventPublisher_Subscribe_Call) Return(err error) *MockDomainEventPublisher_Subscribe_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDomainEventPublisher_Subscribe_Call) RunAndReturn(run func(eventType string, handler domain.EventHandler) error) *MockDomainEventPublisher_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// Unsubscribe provides a mock function for the type MockDomainEventPublisher
func (_mock *MockDomainEventPublisher) Unsubscribe(eventType string, handler domain.EventHandler) error {
	ret := _mock.Called(eventType, handler)

	if len(ret) == 0 {
		panic("no return value specified for Unsubscribe")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, domain.EventHandler) error); ok {
		r0 = returnFunc(eventType, handler)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDomainEventPublisher_Unsubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unsubscribe'
type MockDomainEventPublisher_Unsubscribe_Call struct {
	*mock.Call
}

// Unsubscribe is a helper method to define mock.On call
//   - eventType string
//   - handler domain.EventHandler
func (_e *MockDomainEventPublisher_Expecter) Unsubscribe(eventType interface{}, handler interface{}) *MockDomainEventPublisher_Unsubscribe_Call {
	return &MockDomainEventPublisher_Unsubscribe_Call{Call: _e.mock.On("Unsubscribe", eventType, handler)}
}

func (_c *MockDomainEventPublisher_Unsubscribe_Call) Run(run func(eventType string, handler domain.EventHandler)) *MockDomainEventPublisher_Unsubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 domain.EventHandler
		if args[1] != nil {
			arg1 = args[1].(domain.EventHandler)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomainEventPublisher_Unsubscribe_Call) Return(err error) *MockDomainEventPublisher_Unsubscribe_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDomainEventPublisher_Unsubscribe_Call) RunAndReturn(run func(eventType string, handler domain.EventHandler) error) *MockDomainEventPublisher_Unsubscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDomainEventHandler creates a new instance of MockDomainEventHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDomainEventHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDomainEventHandler {
	mock := &MockDomainEventHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDomainEventHandler is an autogenerated mock type for the EventHandler type
type MockDomainEventHandler struct {
	mock.Mock
}

type MockDomainEventHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDomainEventHandler) EXPECT() *MockDomainEventHandler_Expecter {
	return &MockDomainEventHandler_Expecter{mock: &_m.Mock}
}

// Handle provides a mock function for the type MockDomainEventHandler
func (_mock *MockDomainEventHandler) Handle(event domain.Event) error {
	ret := _mock.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for Handle")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(domain.Event) error); ok {
		r0 = returnFunc(event)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDomainEventHandler_Handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Handle'
type MockDomainEventHandler_Handle_Call struct {
	*mock.Call
}

// Handle is a helper method to define mock.On call
//   - event domain.Event
func (_e *MockDomainEventHandler_Expecter) Handle(event interface{}) *MockDomainEventHandler_Handle_Call {
	return &MockDomainEventHandler_Handle_Call{Call: _e.mock.On("Handle", event)}
}

func (_c *MockDomainEventHandler_Handle_Call) Run(run func(event domain.Event)) *MockDomainEventHandler_Handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.Event
		if args[0] != nil {
			arg0 = args[0].(domain.Event)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDomainEventHandler_Handle_Call) Return(err error) *MockDomainEventHandler_Handle_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDomainEventHandler_Handle_Call) RunAndReturn(run func(event domain.Event) error) *MockDomainEventHandler_Handle_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDomainTemplateProcessingService creates a new instance of MockDomainTemplateProcessingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDomainTemplateProcessingService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDomainTemplateProcessingService {
	mock := &MockDomainTemplateProcessingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDomainTemplateProcessingService is an autogenerated mock type for the TemplateProcessingService type
type MockDomainTemplateProcessingService struct {
	mock.Mock
}

type MockDomainTemplateProcessingService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDomainTemplateProcessingService) EXPECT() *MockDomainTemplateProcessingService_Expecter {
	return &MockDomainTemplateProcessingService_Expecter{mock: &_m.Mock}
}

// ProcessTemplate provides a mock function for the type MockDomainTemplateProcessingService
func (_mock *MockDomainTemplateProcessingService) ProcessTemplate(ctx context.Context, templatePath string, variables map[string]interface{}) (string, error) {
	ret := _mock.Called(ctx, templatePath, variables)

	if len(ret) == 0 {
		panic("no return value specified for ProcessTemplate")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) (string, error)); ok {
		return returnFunc(ctx, templatePath, variables)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) string); ok {
		r0 = returnFunc(ctx, templatePath, variables)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, map[string]interface{}) error); ok {
		r1 = returnFunc(ctx, templatePath, variables)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainTemplateProcessingService_ProcessTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessTemplate'
type MockDomainTemplateProcessingService_ProcessTemplate_Call struct {
	*mock.Call
}

// ProcessTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - templatePath string
//   - variables map[string]interface{}
func (_e *MockDomainTemplateProcessingService_Expecter) ProcessTemplate(ctx interface{}, templatePath interface{}, variables interface{}) *MockDomainTemplateProcessingService_ProcessTemplate_Call {
	return &MockDomainTemplateProcessingService_ProcessTemplate_Call{Call: _e.mock.On("ProcessTemplate", ctx, templatePath, variables)}
}

func (_c *MockDomainTemplateProcessingService_ProcessTemplate_Call) Run(run func(ctx context.Context, templatePath string, variables map[string]interface{})) *MockDomainTemplateProcessingService_ProcessTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 map[string]interface{}
		if args[2] != nil {
			arg2 = args[2].(map[string]interface{})
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDomainTemplateProcessingService_ProcessTemplate_Call) Return(s string, err error) *MockDomainTemplateProcessingService_ProcessTemplate_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockDomainTemplateProcessingService_ProcessTemplate_Call) RunAndReturn(run func(ctx context.Context, templatePath string, variables map[string]interface{}) (string, error)) *MockDomainTemplateProcessingService_ProcessTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessTemplateToFile provides a mock function for the type MockDomainTemplateProcessingService
func (_mock *MockDomainTemplateProcessingService) ProcessTemplateToFile(ctx context.Context, templatePath string, outputPath string, variables map[string]interface{}) error {
	ret := _mock.Called(ctx, templatePath, outputPath, variables)

	if len(ret) == 0 {
		panic("no return value specified for ProcessTemplateToFile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, map[string]interface{}) error); ok {
		r0 = returnFunc(ctx, templatePath, outputPath, variables)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDomainTemplateProcessingService_ProcessTemplateToFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessTemplateToFile'
type MockDomainTemplateProcessingService_ProcessTemplateToFile_Call struct {
	*mock.Call
}

// ProcessTemplateToFile is a helper method to define mock.On call
//   - ctx context.Context
//   - templatePath string
//   - outputPath string
//   - variables map[string]interface{}
func (_e *MockDomainTemplateProcessingService_Expecter) ProcessTemplateToFile(ctx interface{}, templatePath interface{}, outputPath interface{}, variables interface{}) *MockDomainTemplateProcessingService_ProcessTemplateToFile_Call {
	return &MockDomainTemplateProcessingService_ProcessTemplateToFile_Call{Call: _e.mock.On("ProcessTemplateToFile", ctx, templatePath, outputPath, variables)}
}

func (_c *MockDomainTemplateProcessingService_ProcessTemplateToFile_Call) Run(run func(ctx context.Context, templatePath string, outputPath string, variables map[string]interface{})) *MockDomainTemplateProcessingService_ProcessTemplateToFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 map[string]interface{}
		if args[3] != nil {
			arg3 = args[3].(map[string]interface{})
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockDomainTemplateProcessingService_ProcessTemplateToFile_Call) Return(err error) *MockDomainTemplateProcessingService_ProcessTemplateToFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDomainTemplateProcessingService_ProcessTemplateToFile_Call) RunAndReturn(run func(ctx context.Context, templatePath string, outputPath string, variables map[string]interface{}) error) *MockDomainTemplateProcessingService_ProcessTemplateToFile_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateTemplate provides a mock function for the type MockDomainTemplateProcessingService
func (_mock *MockDomainTemplateProcessingService) ValidateTemplate(ctx context.Context, templatePath string, requiredVars []string) error {
	ret := _mock.Called(ctx, templatePath, requiredVars)

	if len(ret) == 0 {
		panic("no return value specified for ValidateTemplate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = returnFunc(ctx, templatePath, requiredVars)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDomainTemplateProcessingService_ValidateTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateTemplate'
type MockDomainTemplateProcessingService_ValidateTemplate_Call struct {
	*mock.Call
}

// ValidateTemplate is a helper method to define mock.On call
//   - ctx context.Context
//   - templatePath string
//   - requiredVars []string
func (_e *MockDomainTemplateProcessingService_Expecter) ValidateTemplate(ctx interface{}, templatePath interface{}, requiredVars interface{}) *MockDomainTemplateProcessingService_ValidateTemplate_Call {
	return &MockDomainTemplateProcessingService_ValidateTemplate_Call{Call: _e.mock.On("ValidateTemplate", ctx, templatePath, requiredVars)}
}

func (_c *MockDomainTemplateProcessingService_ValidateTemplate_Call) Run(run func(ctx context.Context, templatePath string, requiredVars []string)) *MockDomainTemplateProcessingService_ValidateTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDomainTemplateProcessingService_ValidateTemplate_Call) Return(err error) *MockDomainTemplateProcessingService_ValidateTemplate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDomainTemplateProcessingService_ValidateTemplate_Call) RunAndReturn(run func(ctx context.Context, templatePath string, requiredVars []string) error) *MockDomainTemplateProcessingService_ValidateTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDomainPDFGenerationService creates a new instance of MockDomainPDFGenerationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDomainPDFGenerationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDomainPDFGenerationService {
	mock := &MockDomainPDFGenerationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDomainPDFGenerationService is an autogenerated mock type for the PDFGenerationService type
type MockDomainPDFGenerationService struct {
	mock.Mock
}

type MockDomainPDFGenerationService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDomainPDFGenerationService) EXPECT() *MockDomainPDFGenerationService_Expecter {
	return &MockDomainPDFGenerationService_Expecter{mock: &_m.Mock}
}

// GeneratePDF provides a mock function for the type MockDomainPDFGenerationService
func (_mock *MockDomainPDFGenerationService) GeneratePDF(ctx context.Context, latexContent string, outputPath string) (string, error) {
	ret := _mock.Called(ctx, latexContent, outputPath)

	if len(ret) == 0 {
		panic("no return value specified for GeneratePDF")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return returnFunc(ctx, latexContent, outputPath)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = returnFunc(ctx, latexContent, outputPath)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, latexContent, outputPath)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainPDFGenerationService_GeneratePDF_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GeneratePDF'
type MockDomainPDFGenerationService_GeneratePDF_Call struct {
	*mock.Call
}

// GeneratePDF is a helper method to define mock.On call
//   - ctx context.Context
//   - latexContent string
//   - outputPath string
func (_e *MockDomainPDFGenerationService_Expecter) GeneratePDF(ctx interface{}, latexContent interface{}, outputPath interface{}) *MockDomainPDFGenerationService_GeneratePDF_Call {
	return &MockDomainPDFGenerationService_GeneratePDF_Call{Call: _e.mock.On("GeneratePDF", ctx, latexContent, outputPath)}
}

func (_c *MockDomainPDFGenerationService_GeneratePDF_Call) Run(run func(ctx context.Context, latexContent string, outputPath string)) *MockDomainPDFGenerationService_GeneratePDF_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDomainPDFGenerationService_GeneratePDF_Call) Return(s string, err error) *MockDomainPDFGenerationService_GeneratePDF_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockDomainPDFGenerationService_GeneratePDF_Call) RunAndReturn(run func(ctx context.Context, latexContent string, outputPath string) (string, error)) *MockDomainPDFGenerationService_GeneratePDF_Call {
	_c.Call.Return(run)
	return _c
}

// GetSupportedEngines provides a mock function for the type MockDomainPDFGenerationService
func (_mock *MockDomainPDFGenerationService) GetSupportedEngines() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSupportedEngines")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockDomainPDFGenerationService_GetSupportedEngines_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSupportedEngines'
type MockDomainPDFGenerationService_GetSupportedEngines_Call struct {
	*mock.Call
}

// GetSupportedEngines is a helper method to define mock.On call
func (_e *MockDomainPDFGenerationService_Expecter) GetSupportedEngines() *MockDomainPDFGenerationService_GetSupportedEngines_Call {
	return &MockDomainPDFGenerationService_GetSupportedEngines_Call{Call: _e.mock.On("GetSupportedEngines")}
}

func (_c *MockDomainPDFGenerationService_GetSupportedEngines_Call) Run(run func()) *MockDomainPDFGenerationService_GetSupportedEngines_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDomainPDFGenerationService_GetSupportedEngines_Call) Return(strings []string) *MockDomainPDFGenerationService_GetSupportedEngines_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockDomainPDFGenerationService_GetSupportedEngines_Call) RunAndReturn(run func() []string) *MockDomainPDFGenerationService_GetSupportedEngines_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateEngine provides a mock function for the type MockDomainPDFGenerationService
func (_mock *MockDomainPDFGenerationService) ValidateEngine(engine string) error {
	ret := _mock.Called(engine)

	if len(ret) == 0 {
		panic("no return value specified for ValidateEngine")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(engine)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDomainPDFGenerationService_ValidateEngine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateEngine'
type MockDomainPDFGenerationService_ValidateEngine_Call struct {
	*mock.Call
}

// ValidateEngine is a helper method to define mock.On call
//   - engine string
func (_e *MockDomainPDFGenerationService_Expecter) ValidateEngine(engine interface{}) *MockDomainPDFGenerationService_ValidateEngine_Call {
	return &MockDomainPDFGenerationService_ValidateEngine_Call{Call: _e.mock.On("ValidateEngine", engine)}
}

func (_c *MockDomainPDFGenerationService_ValidateEngine_Call) Run(run func(engine string)) *MockDomainPDFGenerationService_ValidateEngine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDomainPDFGenerationService_ValidateEngine_Call) Return(err error) *MockDomainPDFGenerationService_ValidateEngine_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDomainPDFGenerationService_ValidateEngine_Call) RunAndReturn(run func(engine string) error) *MockDomainPDFGenerationService_ValidateEngine_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDomainConversionService creates a new instance of MockDomainConversionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDomainConversionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDomainConversionService {
	mock := &MockDomainConversionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDomainConversionService is an autogenerated mock type for the ConversionService type
type MockDomainConversionService struct {
	mock.Mock
}

type MockDomainConversionService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDomainConversionService) EXPECT() *MockDomainConversionService_Expecter {
	return &MockDomainConversionService_Expecter{mock: &_m.Mock}
}

// ConvertPDFToImages provides a mock function for the type MockDomainConversionService
func (_mock *MockDomainConversionService) ConvertPDFToImages(ctx context.Context, pdfPath string, formats []string) ([]string, error) {
	ret := _mock.Called(ctx, pdfPath, formats)

	if len(ret) == 0 {
		panic("no return value specified for ConvertPDFToImages")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string) ([]string, error)); ok {
		return returnFunc(ctx, pdfPath, formats)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []string) []string); ok {
		r0 = returnFunc(ctx, pdfPath, formats)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = returnFunc(ctx, pdfPath, formats)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainConversionService_ConvertPDFToImages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertPDFToImages'
type MockDomainConversionService_ConvertPDFToImages_Call struct {
	*mock.Call
}

// ConvertPDFToImages is a helper method to define mock.On call
//   - ctx context.Context
//   - pdfPath string
//   - formats []string
func (_e *MockDomainConversionService_Expecter) ConvertPDFToImages(ctx interface{}, pdfPath interface{}, formats interface{}) *MockDomainConversionService_ConvertPDFToImages_Call {
	return &MockDomainConversionService_ConvertPDFToImages_Call{Call: _e.mock.On("ConvertPDFToImages", ctx, pdfPath, formats)}
}

func (_c *MockDomainConversionService_ConvertPDFToImages_Call) Run(run func(ctx context.Context, pdfPath string, formats []string)) *MockDomainConversionService_ConvertPDFToImages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []string
		if args[2] != nil {
			arg2 = args[2].([]string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDomainConversionService_ConvertPDFToImages_Call) Return(strings []string, err error) *MockDomainConversionService_ConvertPDFToImages_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockDomainConversionService_ConvertPDFToImages_Call) RunAndReturn(run func(ctx context.Context, pdfPath string, formats []string) ([]string, error)) *MockDomainConversionService_ConvertPDFToImages_Call {
	_c.Call.Return(run)
	return _c
}

// GetSupportedFormats provides a mock function for the type MockDomainConversionService
func (_mock *MockDomainConversionService) GetSupportedFormats() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSupportedFormats")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockDomainConversionService_GetSupportedFormats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSupportedFormats'
type MockDomainConversionService_GetSupportedFormats_Call struct {
	*mock.Call
}

// GetSupportedFormats is a helper method to define mock.On call
func (_e *MockDomainConversionService_Expecter) GetSupportedFormats() *MockDomainConversionService_GetSupportedFormats_Call {
	return &MockDomainConversionService_GetSupportedFormats_Call{Call: _e.mock.On("GetSupportedFormats")}
}

func (_c *MockDomainConversionService_GetSupportedFormats_Call) Run(run func()) *MockDomainConversionService_GetSupportedFormats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDomainConversionService_GetSupportedFormats_Call) Return(strings []string) *MockDomainConversionService_GetSupportedFormats_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockDomainConversionService_GetSupportedFormats_Call) RunAndReturn(run func() []string) *MockDomainConversionService_GetSupportedFormats_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateFormat provides a mock function for the type MockDomainConversionService
func (_mock *MockDomainConversionService) ValidateFormat(format string) error {
	ret := _mock.Called(format)

	if len(ret) == 0 {
		panic("no return value specified for ValidateFormat")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(format)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDomainConversionService_ValidateFormat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateFormat'
type MockDomainConversionService_ValidateFormat_Call struct {
	*mock.Call
}

// ValidateFormat is a helper method to define mock.On call
//   - format string
func (_e *MockDomainConversionService_Expecter) ValidateFormat(format interface{}) *MockDomainConversionService_ValidateFormat_Call {
	return &MockDomainConversionService_ValidateFormat_Call{Call: _e.mock.On("ValidateFormat", format)}
}

func (_c *MockDomainConversionService_ValidateFormat_Call) Run(run func(format string)) *MockDomainConversionService_ValidateFormat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDomainConversionService_ValidateFormat_Call) Return(err error) *MockDomainConversionService_ValidateFormat_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDomainConversionService_ValidateFormat_Call) RunAndReturn(run func(format string) error) *MockDomainConversionService_ValidateFormat_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDomainFileManagementService creates a new instance of MockDomainFileManagementService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDomainFileManagementService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDomainFileManagementService {
	mock := &MockDomainFileManagementService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDomainFileManagementService is an autogenerated mock type for the FileManagementService type
type MockDomainFileManagementService struct {
	mock.Mock
}

type MockDomainFileManagementService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDomainFileManagementService) EXPECT() *MockDomainFileManagementService_Expecter {
	return &MockDomainFileManagementService_Expecter{mock: &_m.Mock}
}

// CleanAuxiliaryFiles provides a mock function for the type MockDomainFileManagementService
func (_mock *MockDomainFileManagementService) CleanAuxiliaryFiles(ctx context.Context, directory string) error {
	ret := _mock.Called(ctx, directory)

	if len(ret) == 0 {
		panic("no return value specified for CleanAuxiliaryFiles")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, directory)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDomainFileManagementService_CleanAuxiliaryFiles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CleanAuxiliaryFiles'
type MockDomainFileManagementService_CleanAuxiliaryFiles_Call struct {
	*mock.Call
}

// CleanAuxiliaryFiles is a helper method to define mock.On call
//   - ctx context.Context
//   - directory string
func (_e *MockDomainFileManagementService_Expecter) CleanAuxiliaryFiles(ctx interface{}, directory interface{}) *MockDomainFileManagementService_CleanAuxiliaryFiles_Call {
	return &MockDomainFileManagementService_CleanAuxiliaryFiles_Call{Call: _e.mock.On("CleanAuxiliaryFiles", ctx, directory)}
}

func (_c *MockDomainFileManagementService_CleanAuxiliaryFiles_Call) Run(run func(ctx context.Context, directory string)) *MockDomainFileManagementService_CleanAuxiliaryFiles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomainFileManagementService_CleanAuxiliaryFiles_Call) Return(err error) *MockDomainFileManagementService_CleanAuxiliaryFiles_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDomainFileManagementService_CleanAuxiliaryFiles_Call) RunAndReturn(run func(ctx context.Context, directory string) error) *MockDomainFileManagementService_CleanAuxiliaryFiles_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDirectory provides a mock function for the type MockDomainFileManagementService
func (_mock *MockDomainFileManagementService) CreateDirectory(ctx context.Context, path string) error {
	ret := _mock.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for CreateDirectory")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, path)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDomainFileManagementService_CreateDirectory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDirectory'
type MockDomainFileManagementService_CreateDirectory_Call struct {
	*mock.Call
}

// CreateDirectory is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *MockDomainFileManagementService_Expecter) CreateDirectory(ctx interface{}, path interface{}) *MockDomainFileManagementService_CreateDirectory_Call {
	return &MockDomainFileManagementService_CreateDirectory_Call{Call: _e.mock.On("CreateDirectory", ctx, path)}
}

func (_c *MockDomainFileManagementService_CreateDirectory_Call) Run(run func(ctx context.Context, path string)) *MockDomainFileManagementService_CreateDirectory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomainFileManagementService_CreateDirectory_Call) Return(err error) *MockDomainFileManagementService_CreateDirectory_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDomainFileManagementService_CreateDirectory_Call) RunAndReturn(run func(ctx context.Context, path string) error) *MockDomainFileManagementService_CreateDirectory_Call {
	_c.Call.Return(run)
	return _c
}

// FileExists provides a mock function for the type MockDomainFileManagementService
func (_mock *MockDomainFileManagementService) FileExists(ctx context.Context, path string) bool {
	ret := _mock.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for FileExists")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = returnFunc(ctx, path)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockDomainFileManagementService_FileExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FileExists'
type MockDomainFileManagementService_FileExists_Call struct {
	*mock.Call
}

// FileExists is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *MockDomainFileManagementService_Expecter) FileExists(ctx interface{}, path interface{}) *MockDomainFileManagementService_FileExists_Call {
	return &MockDomainFileManagementService_FileExists_Call{Call: _e.mock.On("FileExists", ctx, path)}
}

func (_c *MockDomainFileManagementService_FileExists_Call) Run(run func(ctx context.Context, path string)) *MockDomainFileManagementService_FileExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomainFileManagementService_FileExists_Call) Return(b bool) *MockDomainFileManagementService_FileExists_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockDomainFileManagementService_FileExists_Call) RunAndReturn(run func(ctx context.Context, path string) bool) *MockDomainFileManagementService_FileExists_Call {
	_c.Call.Return(run)
	return _c
}

// ReadFile provides a mock function for the type MockDomainFileManagementService
func (_mock *MockDomainFileManagementService) ReadFile(ctx context.Context, path string) ([]byte, error) {
	ret := _mock.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for ReadFile")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) ([]byte, error)); ok {
		return returnFunc(ctx, path)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = returnFunc(ctx, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainFileManagementService_ReadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFile'
type MockDomainFileManagementService_ReadFile_Call struct {
	*mock.Call
}

// ReadFile is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *MockDomainFileManagementService_Expecter) ReadFile(ctx interface{}, path interface{}) *MockDomainFileManagementService_ReadFile_Call {
	return &MockDomainFileManagementService_ReadFile_Call{Call: _e.mock.On("ReadFile", ctx, path)}
}

func (_c *MockDomainFileManagementService_ReadFile_Call) Run(run func(ctx context.Context, path string)) *MockDomainFileManagementService_ReadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomainFileManagementService_ReadFile_Call) Return(bytes []byte, err error) *MockDomainFileManagementService_ReadFile_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockDomainFileManagementService_ReadFile_Call) RunAndReturn(run func(ctx context.Context, path string) ([]byte, error)) *MockDomainFileManagementService_ReadFile_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveFile provides a mock function for the type MockDomainFileManagementService
func (_mock *MockDomainFileManagementService) RemoveFile(ctx context.Context, path string) error {
	ret := _mock.Called(ctx, path)

	if len(ret) == 0 {
		panic("no return value specified for RemoveFile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, path)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDomainFileManagementService_RemoveFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveFile'
type MockDomainFileManagementService_RemoveFile_Call struct {
	*mock.Call
}

// RemoveFile is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
func (_e *MockDomainFileManagementService_Expecter) RemoveFile(ctx interface{}, path interface{}) *MockDomainFileManagementService_RemoveFile_Call {
	return &MockDomainFileManagementService_RemoveFile_Call{Call: _e.mock.On("RemoveFile", ctx, path)}
}

func (_c *MockDomainFileManagementService_RemoveFile_Call) Run(run func(ctx context.Context, path string)) *MockDomainFileManagementService_RemoveFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomainFileManagementService_RemoveFile_Call) Return(err error) *MockDomainFileManagementService_RemoveFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDomainFileManagementService_RemoveFile_Call) RunAndReturn(run func(ctx context.Context, path string) error) *MockDomainFileManagementService_RemoveFile_Call {
	_c.Call.Return(run)
	return _c
}

// WriteFile provides a mock function for the type MockDomainFileManagementService
func (_mock *MockDomainFileManagementService) WriteFile(ctx context.Context, path string, content []byte) error {
	ret := _mock.Called(ctx, path, content)

	if len(ret) == 0 {
		panic("no return value specified for WriteFile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, []byte) error); ok {
		r0 = returnFunc(ctx, path, content)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDomainFileManagementService_WriteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteFile'
type MockDomainFileManagementService_WriteFile_Call struct {
	*mock.Call
}

// WriteFile is a helper method to define mock.On call
//   - ctx context.Context
//   - path string
//   - content []byte
func (_e *MockDomainFileManagementService_Expecter) WriteFile(ctx interface{}, path interface{}, content interface{}) *MockDomainFileManagementService_WriteFile_Call {
	return &MockDomainFileManagementService_WriteFile_Call{Call: _e.mock.On("WriteFile", ctx, path, content)}
}

func (_c *MockDomainFileManagementService_WriteFile_Call) Run(run func(ctx context.Context, path string, content []byte)) *MockDomainFileManagementService_WriteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []byte
		if args[2] != nil {
			arg2 = args[2].([]byte)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDomainFileManagementService_WriteFile_Call) Return(err error) *MockDomainFileManagementService_WriteFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDomainFileManagementService_WriteFile_Call) RunAndReturn(run func(ctx context.Context, path string, content []byte) error) *MockDomainFileManagementService_WriteFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDomainConfigurationService creates a new instance of MockDomainConfigurationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDomainConfigurationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDomainConfigurationService {
	mock := &MockDomainConfigurationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDomainConfigurationService is an autogenerated mock type for the ConfigurationService type
type MockDomainConfigurationService struct {
	mock.Mock
}

type MockDomainConfigurationService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDomainConfigurationService) EXPECT() *MockDomainConfigurationService_Expecter {
	return &MockDomainConfigurationService_Expecter{mock: &_m.Mock}
}

// CreateDefaultConfiguration provides a mock function for the type MockDomainConfigurationService
func (_mock *MockDomainConfigurationService) CreateDefaultConfiguration(ctx context.Context, templatePath string) (*domain.Configuration, error) {
	ret := _mock.Called(ctx, templatePath)

	if len(ret) == 0 {
		panic("no return value specified for CreateDefaultConfiguration")
	}

	var r0 *domain.Configuration
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.Configuration, error)); ok {
		return returnFunc(ctx, templatePath)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.Configuration); ok {
		r0 = returnFunc(ctx, templatePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Configuration)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, templatePath)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainConfigurationService_CreateDefaultConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDefaultConfiguration'
type MockDomainConfigurationService_CreateDefaultConfiguration_Call struct {
	*mock.Call
}

// CreateDefaultConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - templatePath string
func (_e *MockDomainConfigurationService_Expecter) CreateDefaultConfiguration(ctx interface{}, templatePath interface{}) *MockDomainConfigurationService_CreateDefaultConfiguration_Call {
	return &MockDomainConfigurationService_CreateDefaultConfiguration_Call{Call: _e.mock.On("CreateDefaultConfiguration", ctx, templatePath)}
}

func (_c *MockDomainConfigurationService_CreateDefaultConfiguration_Call) Run(run func(ctx context.Context, templatePath string)) *MockDomainConfigurationService_CreateDefaultConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomainConfigurationService_CreateDefaultConfiguration_Call) Return(configuration *domain.Configuration, err error) *MockDomainConfigurationService_CreateDefaultConfiguration_Call {
	_c.Call.Return(configuration, err)
	return _c
}

func (_c *MockDomainConfigurationService_CreateDefaultConfiguration_Call) RunAndReturn(run func(ctx context.Context, templatePath string) (*domain.Configuration, error)) *MockDomainConfigurationService_CreateDefaultConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// LoadConfiguration provides a mock function for the type MockDomainConfigurationService
func (_mock *MockDomainConfigurationService) LoadConfiguration(ctx context.Context, configPath string) (*domain.Configuration, error) {
	ret := _mock.Called(ctx, configPath)

	if len(ret) == 0 {
		panic("no return value specified for LoadConfiguration")
	}

	var r0 *domain.Configuration
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.Configuration, error)); ok {
		return returnFunc(ctx, configPath)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.Configuration); ok {
		r0 = returnFunc(ctx, configPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Configuration)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, configPath)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainConfigurationService_LoadConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadConfiguration'
type MockDomainConfigurationService_LoadConfiguration_Call struct {
	*mock.Call
}

// LoadConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - configPath string
func (_e *MockDomainConfigurationService_Expecter) LoadConfiguration(ctx interface{}, configPath interface{}) *MockDomainConfigurationService_LoadConfiguration_Call {
	return &MockDomainConfigurationService_LoadConfiguration_Call{Call: _e.mock.On("LoadConfiguration", ctx, configPath)}
}

func (_c *MockDomainConfigurationService_LoadConfiguration_Call) Run(run func(ctx context.Context, configPath string)) *MockDomainConfigurationService_LoadConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomainConfigurationService_LoadConfiguration_Call) Return(configuration *domain.Configuration, err error) *MockDomainConfigurationService_LoadConfiguration_Call {
	_c.Call.Return(configuration, err)
	return _c
}

func (_c *MockDomainConfigurationService_LoadConfiguration_Call) RunAndReturn(run func(ctx context.Context, configPath string) (*domain.Configuration, error)) *MockDomainConfigurationService_LoadConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// SaveConfiguration provides a mock function for the type MockDomainConfigurationService
func (_mock *MockDomainConfigurationService) SaveConfiguration(ctx context.Context, config *domain.Configuration, configPath string) error {
	ret := _mock.Called(ctx, config, configPath)

	if len(ret) == 0 {
		panic("no return value specified for SaveConfiguration")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Configuration, string) error); ok {
		r0 = returnFunc(ctx, config, configPath)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDomainConfigurationService_SaveConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveConfiguration'
type MockDomainConfigurationService_SaveConfiguration_Call struct {
	*mock.Call
}

// SaveConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - config *domain.Configuration
//   - configPath string
func (_e *MockDomainConfigurationService_Expecter) SaveConfiguration(ctx interface{}, config interface{}, configPath interface{}) *MockDomainConfigurationService_SaveConfiguration_Call {
	return &MockDomainConfigurationService_SaveConfiguration_Call{Call: _e.mock.On("SaveConfiguration", ctx, config, configPath)}
}

func (_c *MockDomainConfigurationService_SaveConfiguration_Call) Run(run func(ctx context.Context, config *domain.Configuration, configPath string)) *MockDomainConfigurationService_SaveConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.Configuration
		if args[1] != nil {
			arg1 = args[1].(*domain.Configuration)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDomainConfigurationService_SaveConfiguration_Call) Return(err error) *MockDomainConfigurationService_SaveConfiguration_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDomainConfigurationService_SaveConfiguration_Call) RunAndReturn(run func(ctx context.Context, config *domain.Configuration, configPath string) error) *MockDomainConfigurationService_SaveConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateConfiguration provides a mock function for the type MockDomainConfigurationService
func (_mock *MockDomainConfigurationService) ValidateConfiguration(ctx context.Context, config *domain.Configuration) error {
	ret := _mock.Called(ctx, config)

	if len(ret) == 0 {
		panic("no return value specified for ValidateConfiguration")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Configuration) error); ok {
		r0 = returnFunc(ctx, config)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDomainConfigurationService_ValidateConfiguration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateConfiguration'
type MockDomainConfigurationService_ValidateConfiguration_Call struct {
	*mock.Call
}

// ValidateConfiguration is a helper method to define mock.On call
//   - ctx context.Context
//   - config *domain.Configuration
func (_e *MockDomainConfigurationService_Expecter) ValidateConfiguration(ctx interface{}, config interface{}) *MockDomainConfigurationService_ValidateConfiguration_Call {
	return &MockDomainConfigurationService_ValidateConfiguration_Call{Call: _e.mock.On("ValidateConfiguration", ctx, config)}
}

func (_c *MockDomainConfigurationService_ValidateConfiguration_Call) Run(run func(ctx context.Context, config *domain.Configuration)) *MockDomainConfigurationService_ValidateConfiguration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.Configuration
		if args[1] != nil {
			arg1 = args[1].(*domain.Configuration)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomainConfigurationService_ValidateConfiguration_Call) Return(err error) *MockDomainConfigurationService_ValidateConfiguration_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDomainConfigurationService_ValidateConfiguration_Call) RunAndReturn(run func(ctx context.Context, config *domain.Configuration) error) *MockDomainConfigurationService_ValidateConfiguration_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDomainBuildService creates a new instance of MockDomainBuildService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDomainBuildService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDomainBuildService {
	mock := &MockDomainBuildService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDomainBuildService is an autogenerated mock type for the BuildService type
type MockDomainBuildService struct {
	mock.Mock
}

type MockDomainBuildService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDomainBuildService) EXPECT() *MockDomainBuildService_Expecter {
	return &MockDomainBuildService_Expecter{mock: &_m.Mock}
}

// BuildPDF provides a mock function for the type MockDomainBuildService
func (_mock *MockDomainBuildService) BuildPDF(ctx context.Context, request *domain.BuildRequest) (*domain.BuildResult, error) {
	ret := _mock.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for BuildPDF")
	}

	var r0 *domain.BuildResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.BuildRequest) (*domain.BuildResult, error)); ok {
		return returnFunc(ctx, request)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.BuildRequest) *domain.BuildResult); ok {
		r0 = returnFunc(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.BuildResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *domain.BuildRequest) error); ok {
		r1 = returnFunc(ctx, request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainBuildService_BuildPDF_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildPDF'
type MockDomainBuildService_BuildPDF_Call struct {
	*mock.Call
}

// BuildPDF is a helper method to define mock.On call
//   - ctx context.Context
//   - request *domain.BuildRequest
func (_e *MockDomainBuildService_Expecter) BuildPDF(ctx interface{}, request interface{}) *MockDomainBuildService_BuildPDF_Call {
	return &MockDomainBuildService_BuildPDF_Call{Call: _e.mock.On("BuildPDF", ctx, request)}
}

func (_c *MockDomainBuildService_BuildPDF_Call) Run(run func(ctx context.Context, request *domain.BuildRequest)) *MockDomainBuildService_BuildPDF_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.BuildRequest
		if args[1] != nil {
			arg1 = args[1].(*domain.BuildRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomainBuildService_BuildPDF_Call) Return(buildResult *domain.BuildResult, err error) *MockDomainBuildService_BuildPDF_Call {
	_c.Call.Return(buildResult, err)
	return _c
}

func (_c *MockDomainBuildService_BuildPDF_Call) RunAndReturn(run func(ctx context.Context, request *domain.BuildRequest) (*domain.BuildResult, error)) *MockDomainBuildService_BuildPDF_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDomainTemplateEngine creates a new instance of MockDomainTemplateEngine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDomainTemplateEngine(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDomainTemplateEngine {
	mock := &MockDomainTemplateEngine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDomainTemplateEngine is an autogenerated mock type for the TemplateEngine type
type MockDomainTemplateEngine struct {
	mock.Mock
}

type MockDomainTemplateEngine_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDomainTemplateEngine) EXPECT() *MockDomainTemplateEngine_Expecter {
	return &MockDomainTemplateEngine_Expecter{mock: &_m.Mock}
}

// GetName provides a mock function for the type MockDomainTemplateEngine
func (_mock *MockDomainTemplateEngine) GetName() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockDomainTemplateEngine_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type MockDomainTemplateEngine_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *MockDomainTemplateEngine_Expecter) GetName() *MockDomainTemplateEngine_GetName_Call {
	return &MockDomainTemplateEngine_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *MockDomainTemplateEngine_GetName_Call) Run(run func()) *MockDomainTemplateEngine_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDomainTemplateEngine_GetName_Call) Return(s string) *MockDomainTemplateEngine_GetName_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockDomainTemplateEngine_GetName_Call) RunAndReturn(run func() string) *MockDomainTemplateEngine_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// GetSupportedFormats provides a mock function for the type MockDomainTemplateEngine
func (_mock *MockDomainTemplateEngine) GetSupportedFormats() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSupportedFormats")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockDomainTemplateEngine_GetSupportedFormats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSupportedFormats'
type MockDomainTemplateEngine_GetSupportedFormats_Call struct {
	*mock.Call
}

// GetSupportedFormats is a helper method to define mock.On call
func (_e *MockDomainTemplateEngine_Expecter) GetSupportedFormats() *MockDomainTemplateEngine_GetSupportedFormats_Call {
	return &MockDomainTemplateEngine_GetSupportedFormats_Call{Call: _e.mock.On("GetSupportedFormats")}
}

func (_c *MockDomainTemplateEngine_GetSupportedFormats_Call) Run(run func()) *MockDomainTemplateEngine_GetSupportedFormats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDomainTemplateEngine_GetSupportedFormats_Call) Return(strings []string) *MockDomainTemplateEngine_GetSupportedFormats_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockDomainTemplateEngine_GetSupportedFormats_Call) RunAndReturn(run func() []string) *MockDomainTemplateEngine_GetSupportedFormats_Call {
	_c.Call.Return(run)
	return _c
}

// Process provides a mock function for the type MockDomainTemplateEngine
func (_mock *MockDomainTemplateEngine) Process(content string, variables map[string]interface{}) (string, error) {
	ret := _mock.Called(content, variables)

	if len(ret) == 0 {
		panic("no return value specified for Process")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, map[string]interface{}) (string, error)); ok {
		return returnFunc(content, variables)
	}
	if returnFunc, ok := ret.Get(0).(func(string, map[string]interface{}) string); ok {
		r0 = returnFunc(content, variables)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, map[string]interface{}) error); ok {
		r1 = returnFunc(content, variables)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainTemplateEngine_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type MockDomainTemplateEngine_Process_Call struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - content string
//   - variables map[string]interface{}
func (_e *MockDomainTemplateEngine_Expecter) Process(content interface{}, variables interface{}) *MockDomainTemplateEngine_Process_Call {
	return &MockDomainTemplateEngine_Process_Call{Call: _e.mock.On("Process", content, variables)}
}

func (_c *MockDomainTemplateEngine_Process_Call) Run(run func(content string, variables map[string]interface{})) *MockDomainTemplateEngine_Process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 map[string]interface{}
		if args[1] != nil {
			arg1 = args[1].(map[string]interface{})
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDomainTemplateEngine_Process_Call) Return(s string, err error) *MockDomainTemplateEngine_Process_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockDomainTemplateEngine_Process_Call) RunAndReturn(run func(content string, variables map[string]interface{}) (string, error)) *MockDomainTemplateEngine_Process_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateContent provides a mock function for the type MockDomainTemplateEngine
func (_mock *MockDomainTemplateEngine) ValidateContent(content string) error {
	ret := _mock.Called(content)

	if len(ret) == 0 {
		panic("no return value specified for ValidateContent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(content)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDomainTemplateEngine_ValidateContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateContent'
type MockDomainTemplateEngine_ValidateContent_Call struct {
	*mock.Call
}

// ValidateContent is a helper method to define mock.On call
//   - content string
func (_e *MockDomainTemplateEngine_Expecter) ValidateContent(content interface{}) *MockDomainTemplateEngine_ValidateContent_Call {
	return &MockDomainTemplateEngine_ValidateContent_Call{Call: _e.mock.On("ValidateContent", content)}
}

func (_c *MockDomainTemplateEngine_ValidateContent_Call) Run(run func(content string)) *MockDomainTemplateEngine_ValidateContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDomainTemplateEngine_ValidateContent_Call) Return(err error) *MockDomainTemplateEngine_ValidateContent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDomainTemplateEngine_ValidateContent_Call) RunAndReturn(run func(content string) error) *MockDomainTemplateEngine_ValidateContent_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDomainPDFEngine creates a new instance of MockDomainPDFEngine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDomainPDFEngine(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDomainPDFEngine {
	mock := &MockDomainPDFEngine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDomainPDFEngine is an autogenerated mock type for the PDFEngine type
type MockDomainPDFEngine struct {
	mock.Mock
}

type MockDomainPDFEngine_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDomainPDFEngine) EXPECT() *MockDomainPDFEngine_Expecter {
	return &MockDomainPDFEngine_Expecter{mock: &_m.Mock}
}

// Compile provides a mock function for the type MockDomainPDFEngine
func (_mock *MockDomainPDFEngine) Compile(ctx context.Context, latexContent string, outputPath string) (string, error) {
	ret := _mock.Called(ctx, latexContent, outputPath)

	if len(ret) == 0 {
		panic("no return value specified for Compile")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return returnFunc(ctx, latexContent, outputPath)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = returnFunc(ctx, latexContent, outputPath)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, latexContent, outputPath)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainPDFEngine_Compile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Compile'
type MockDomainPDFEngine_Compile_Call struct {
	*mock.Call
}

// Compile is a helper method to define mock.On call
//   - ctx context.Context
//   - latexContent string
//   - outputPath string
func (_e *MockDomainPDFEngine_Expecter) Compile(ctx interface{}, latexContent interface{}, outputPath interface{}) *MockDomainPDFEngine_Compile_Call {
	return &MockDomainPDFEngine_Compile_Call{Call: _e.mock.On("Compile", ctx, latexContent, outputPath)}
}

func (_c *MockDomainPDFEngine_Compile_Call) Run(run func(ctx context.Context, latexContent string, outputPath string)) *MockDomainPDFEngine_Compile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDomainPDFEngine_Compile_Call) Return(s string, err error) *MockDomainPDFEngine_Compile_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockDomainPDFEngine_Compile_Call) RunAndReturn(run func(ctx context.Context, latexContent string, outputPath string) (string, error)) *MockDomainPDFEngine_Compile_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function for the type MockDomainPDFEngine
func (_mock *MockDomainPDFEngine) GetName() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockDomainPDFEngine_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type MockDomainPDFEngine_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *MockDomainPDFEngine_Expecter) GetName() *MockDomainPDFEngine_GetName_Call {
	return &MockDomainPDFEngine_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *MockDomainPDFEngine_GetName_Call) Run(run func()) *MockDomainPDFEngine_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDomainPDFEngine_GetName_Call) Return(s string) *MockDomainPDFEngine_GetName_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockDomainPDFEngine_GetName_Call) RunAndReturn(run func() string) *MockDomainPDFEngine_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// GetSupportedFormats provides a mock function for the type MockDomainPDFEngine
func (_mock *MockDomainPDFEngine) GetSupportedFormats() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSupportedFormats")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockDomainPDFEngine_GetSupportedFormats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSupportedFormats'
type MockDomainPDFEngine_GetSupportedFormats_Call struct {
	*mock.Call
}

// GetSupportedFormats is a helper method to define mock.On call
func (_e *MockDomainPDFEngine_Expecter) GetSupportedFormats() *MockDomainPDFEngine_GetSupportedFormats_Call {
	return &MockDomainPDFEngine_GetSupportedFormats_Call{Call: _e.mock.On("GetSupportedFormats")}
}

func (_c *MockDomainPDFEngine_GetSupportedFormats_Call) Run(run func()) *MockDomainPDFEngine_GetSupportedFormats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDomainPDFEngine_GetSupportedFormats_Call) Return(strings []string) *MockDomainPDFEngine_GetSupportedFormats_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockDomainPDFEngine_GetSupportedFormats_Call) RunAndReturn(run func() []string) *MockDomainPDFEngine_GetSupportedFormats_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateEngine provides a mock function for the type MockDomainPDFEngine
func (_mock *MockDomainPDFEngine) ValidateEngine() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ValidateEngine")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDomainPDFEngine_ValidateEngine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateEngine'
type MockDomainPDFEngine_ValidateEngine_Call struct {
	*mock.Call
}

// ValidateEngine is a helper method to define mock.On call
func (_e *MockDomainPDFEngine_Expecter) ValidateEngine() *MockDomainPDFEngine_ValidateEngine_Call {
	return &MockDomainPDFEngine_ValidateEngine_Call{Call: _e.mock.On("ValidateEngine")}
}

func (_c *MockDomainPDFEngine_ValidateEngine_Call) Run(run func()) *MockDomainPDFEngine_ValidateEngine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDomainPDFEngine_ValidateEngine_Call) Return(err error) *MockDomainPDFEngine_ValidateEngine_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDomainPDFEngine_ValidateEngine_Call) RunAndReturn(run func() error) *MockDomainPDFEngine_ValidateEngine_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDomainConversionEngine creates a new instance of MockDomainConversionEngine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDomainConversionEngine(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDomainConversionEngine {
	mock := &MockDomainConversionEngine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDomainConversionEngine is an autogenerated mock type for the ConversionEngine type
type MockDomainConversionEngine struct {
	mock.Mock
}

type MockDomainConversionEngine_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDomainConversionEngine) EXPECT() *MockDomainConversionEngine_Expecter {
	return &MockDomainConversionEngine_Expecter{mock: &_m.Mock}
}

// Convert provides a mock function for the type MockDomainConversionEngine
func (_mock *MockDomainConversionEngine) Convert(ctx context.Context, pdfPath string, format string) (string, error) {
	ret := _mock.Called(ctx, pdfPath, format)

	if len(ret) == 0 {
		panic("no return value specified for Convert")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return returnFunc(ctx, pdfPath, format)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = returnFunc(ctx, pdfPath, format)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = returnFunc(ctx, pdfPath, format)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainConversionEngine_Convert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Convert'
type MockDomainConversionEngine_Convert_Call struct {
	*mock.Call
}

// Convert is a helper method to define mock.On call
//   - ctx context.Context
//   - pdfPath string
//   - format string
func (_e *MockDomainConversionEngine_Expecter) Convert(ctx interface{}, pdfPath interface{}, format interface{}) *MockDomainConversionEngine_Convert_Call {
	return &MockDomainConversionEngine_Convert_Call{Call: _e.mock.On("Convert", ctx, pdfPath, format)}
}

func (_c *MockDomainConversionEngine_Convert_Call) Run(run func(ctx context.Context, pdfPath string, format string)) *MockDomainConversionEngine_Convert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockDomainConversionEngine_Convert_Call) Return(s string, err error) *MockDomainConversionEngine_Convert_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockDomainConversionEngine_Convert_Call) RunAndReturn(run func(ctx context.Context, pdfPath string, format string) (string, error)) *MockDomainConversionEngine_Convert_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function for the type MockDomainConversionEngine
func (_mock *MockDomainConversionEngine) GetName() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockDomainConversionEngine_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type MockDomainConversionEngine_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *MockDomainConversionEngine_Expecter) GetName() *MockDomainConversionEngine_GetName_Call {
	return &MockDomainConversionEngine_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *MockDomainConversionEngine_GetName_Call) Run(run func()) *MockDomainConversionEngine_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDomainConversionEngine_GetName_Call) Return(s string) *MockDomainConversionEngine_GetName_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockDomainConversionEngine_GetName_Call) RunAndReturn(run func() string) *MockDomainConversionEngine_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// GetSupportedFormats provides a mock function for the type MockDomainConversionEngine
func (_mock *MockDomainConversionEngine) GetSupportedFormats() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSupportedFormats")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockDomainConversionEngine_GetSupportedFormats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSupportedFormats'
type MockDomainConversionEngine_GetSupportedFormats_Call struct {
	*mock.Call
}

// GetSupportedFormats is a helper method to define mock.On call
func (_e *MockDomainConversionEngine_Expecter) GetSupportedFormats() *MockDomainConversionEngine_GetSupportedFormats_Call {
	return &MockDomainConversionEngine_GetSupportedFormats_Call{Call: _e.mock.On("GetSupportedFormats")}
}

func (_c *MockDomainConversionEngine_GetSupportedFormats_Call) Run(run func()) *MockDomainConversionEngine_GetSupportedFormats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDomainConversionEngine_GetSupportedFormats_Call) Return(strings []string) *MockDomainConversionEngine_GetSupportedFormats_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockDomainConversionEngine_GetSupportedFormats_Call) RunAndReturn(run func() []string) *MockDomainConversionEngine_GetSupportedFormats_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateEngine provides a mock function for the type MockDomainConversionEngine
func (_mock *MockDomainConversionEngine) ValidateEngine() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ValidateEngine")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDomainConversionEngine_ValidateEngine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateEngine'
type MockDomainConversionEngine_ValidateEngine_Call struct {
	*mock.Call
}

// ValidateEngine is a helper method to define mock.On call
func (_e *MockDomainConversionEngine_Expecter) ValidateEngine() *MockDomainConversionEngine_ValidateEngine_Call {
	return &MockDomainConversionEngine_ValidateEngine_Call{Call: _e.mock.On("ValidateEngine")}
}

func (_c *MockDomainConversionEngine_ValidateEngine_Call) Run(run func()) *MockDomainConversionEngine_ValidateEngine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDomainConversionEngine_ValidateEngine_Call) Return(err error) *MockDomainConversionEngine_ValidateEngine_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDomainConversionEngine_ValidateEngine_Call) RunAndReturn(run func() error) *MockDomainConversionEngine_ValidateEngine_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDomainTemplateEngineFactory creates a new instance of MockDomainTemplateEngineFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDomainTemplateEngineFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDomainTemplateEngineFactory {
	mock := &MockDomainTemplateEngineFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDomainTemplateEngineFactory is an autogenerated mock type for the TemplateEngineFactory type
type MockDomainTemplateEngineFactory struct {
	mock.Mock
}

type MockDomainTemplateEngineFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDomainTemplateEngineFactory) EXPECT() *MockDomainTemplateEngineFactory_Expecter {
	return &MockDomainTemplateEngineFactory_Expecter{mock: &_m.Mock}
}

// CreateEngine provides a mock function for the type MockDomainTemplateEngineFactory
func (_mock *MockDomainTemplateEngineFactory) CreateEngine(engineType string) (domain.TemplateEngine, error) {
	ret := _mock.Called(engineType)

	if len(ret) == 0 {
		panic("no return value specified for CreateEngine")
	}

	var r0 domain.TemplateEngine
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (domain.TemplateEngine, error)); ok {
		return returnFunc(engineType)
	}
	if returnFunc, ok := ret.Get(0).(func(string) domain.TemplateEngine); ok {
		r0 = returnFunc(engineType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.TemplateEngine)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(engineType)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainTemplateEngineFactory_CreateEngine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEngine'
type MockDomainTemplateEngineFactory_CreateEngine_Call struct {
	*mock.Call
}

// CreateEngine is a helper method to define mock.On call
//   - engineType string
func (_e *MockDomainTemplateEngineFactory_Expecter) CreateEngine(engineType interface{}) *MockDomainTemplateEngineFactory_CreateEngine_Call {
	return &MockDomainTemplateEngineFactory_CreateEngine_Call{Call: _e.mock.On("CreateEngine", engineType)}
}

func (_c *MockDomainTemplateEngineFactory_CreateEngine_Call) Run(run func(engineType string)) *MockDomainTemplateEngineFactory_CreateEngine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDomainTemplateEngineFactory_CreateEngine_Call) Return(templateEngine domain.TemplateEngine, err error) *MockDomainTemplateEngineFactory_CreateEngine_Call {
	_c.Call.Return(templateEngine, err)
	return _c
}

func (_c *MockDomainTemplateEngineFactory_CreateEngine_Call) RunAndReturn(run func(engineType string) (domain.TemplateEngine, error)) *MockDomainTemplateEngineFactory_CreateEngine_Call {
	_c.Call.Return(run)
	return _c
}

// GetAvailableEngines provides a mock function for the type MockDomainTemplateEngineFactory
func (_mock *MockDomainTemplateEngineFactory) GetAvailableEngines() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAvailableEngines")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockDomainTemplateEngineFactory_GetAvailableEngines_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAvailableEngines'
type MockDomainTemplateEngineFactory_GetAvailableEngines_Call struct {
	*mock.Call
}

// GetAvailableEngines is a helper method to define mock.On call
func (_e *MockDomainTemplateEngineFactory_Expecter) GetAvailableEngines() *MockDomainTemplateEngineFactory_GetAvailableEngines_Call {
	return &MockDomainTemplateEngineFactory_GetAvailableEngines_Call{Call: _e.mock.On("GetAvailableEngines")}
}

func (_c *MockDomainTemplateEngineFactory_GetAvailableEngines_Call) Run(run func()) *MockDomainTemplateEngineFactory_GetAvailableEngines_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDomainTemplateEngineFactory_GetAvailableEngines_Call) Return(strings []string) *MockDomainTemplateEngineFactory_GetAvailableEngines_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockDomainTemplateEngineFactory_GetAvailableEngines_Call) RunAndReturn(run func() []string) *MockDomainTemplateEngineFactory_GetAvailableEngines_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDomainPDFEngineFactory creates a new instance of MockDomainPDFEngineFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDomainPDFEngineFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDomainPDFEngineFactory {
	mock := &MockDomainPDFEngineFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDomainPDFEngineFactory is an autogenerated mock type for the PDFEngineFactory type
type MockDomainPDFEngineFactory struct {
	mock.Mock
}

type MockDomainPDFEngineFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDomainPDFEngineFactory) EXPECT() *MockDomainPDFEngineFactory_Expecter {
	return &MockDomainPDFEngineFactory_Expecter{mock: &_m.Mock}
}

// CreateEngine provides a mock function for the type MockDomainPDFEngineFactory
func (_mock *MockDomainPDFEngineFactory) CreateEngine(engineName string) (domain.PDFEngine, error) {
	ret := _mock.Called(engineName)

	if len(ret) == 0 {
		panic("no return value specified for CreateEngine")
	}

	var r0 domain.PDFEngine
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (domain.PDFEngine, error)); ok {
		return returnFunc(engineName)
	}
	if returnFunc, ok := ret.Get(0).(func(string) domain.PDFEngine); ok {
		r0 = returnFunc(engineName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.PDFEngine)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(engineName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainPDFEngineFactory_CreateEngine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEngine'
type MockDomainPDFEngineFactory_CreateEngine_Call struct {
	*mock.Call
}

// CreateEngine is a helper method to define mock.On call
//   - engineName string
func (_e *MockDomainPDFEngineFactory_Expecter) CreateEngine(engineName interface{}) *MockDomainPDFEngineFactory_CreateEngine_Call {
	return &MockDomainPDFEngineFactory_CreateEngine_Call{Call: _e.mock.On("CreateEngine", engineName)}
}

func (_c *MockDomainPDFEngineFactory_CreateEngine_Call) Run(run func(engineName string)) *MockDomainPDFEngineFactory_CreateEngine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDomainPDFEngineFactory_CreateEngine_Call) Return(pDFEngine domain.PDFEngine, err error) *MockDomainPDFEngineFactory_CreateEngine_Call {
	_c.Call.Return(pDFEngine, err)
	return _c
}

func (_c *MockDomainPDFEngineFactory_CreateEngine_Call) RunAndReturn(run func(engineName string) (domain.PDFEngine, error)) *MockDomainPDFEngineFactory_CreateEngine_Call {
	_c.Call.Return(run)
	return _c
}

// GetAvailableEngines provides a mock function for the type MockDomainPDFEngineFactory
func (_mock *MockDomainPDFEngineFactory) GetAvailableEngines() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAvailableEngines")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockDomainPDFEngineFactory_GetAvailableEngines_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAvailableEngines'
type MockDomainPDFEngineFactory_GetAvailableEngines_Call struct {
	*mock.Call
}

// GetAvailableEngines is a helper method to define mock.On call
func (_e *MockDomainPDFEngineFactory_Expecter) GetAvailableEngines() *MockDomainPDFEngineFactory_GetAvailableEngines_Call {
	return &MockDomainPDFEngineFactory_GetAvailableEngines_Call{Call: _e.mock.On("GetAvailableEngines")}
}

func (_c *MockDomainPDFEngineFactory_GetAvailableEngines_Call) Run(run func()) *MockDomainPDFEngineFactory_GetAvailableEngines_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDomainPDFEngineFactory_GetAvailableEngines_Call) Return(strings []string) *MockDomainPDFEngineFactory_GetAvailableEngines_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockDomainPDFEngineFactory_GetAvailableEngines_Call) RunAndReturn(run func() []string) *MockDomainPDFEngineFactory_GetAvailableEngines_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDomainConversionEngineFactory creates a new instance of MockDomainConversionEngineFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDomainConversionEngineFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDomainConversionEngineFactory {
	mock := &MockDomainConversionEngineFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDomainConversionEngineFactory is an autogenerated mock type for the ConversionEngineFactory type
type MockDomainConversionEngineFactory struct {
	mock.Mock
}

type MockDomainConversionEngineFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDomainConversionEngineFactory) EXPECT() *MockDomainConversionEngineFactory_Expecter {
	return &MockDomainConversionEngineFactory_Expecter{mock: &_m.Mock}
}

// CreateEngine provides a mock function for the type MockDomainConversionEngineFactory
func (_mock *MockDomainConversionEngineFactory) CreateEngine(engineName string) (domain.ConversionEngine, error) {
	ret := _mock.Called(engineName)

	if len(ret) == 0 {
		panic("no return value specified for CreateEngine")
	}

	var r0 domain.ConversionEngine
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (domain.ConversionEngine, error)); ok {
		return returnFunc(engineName)
	}
	if returnFunc, ok := ret.Get(0).(func(string) domain.ConversionEngine); ok {
		r0 = returnFunc(engineName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.ConversionEngine)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(engineName)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDomainConversionEngineFactory_CreateEngine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateEngine'
type MockDomainConversionEngineFactory_CreateEngine_Call struct {
	*mock.Call
}

// CreateEngine is a helper method to define mock.On call
//   - engineName string
func (_e *MockDomainConversionEngineFactory_Expecter) CreateEngine(engineName interface{}) *MockDomainConversionEngineFactory_CreateEngine_Call {
	return &MockDomainConversionEngineFactory_CreateEngine_Call{Call: _e.mock.On("CreateEngine", engineName)}
}

func (_c *MockDomainConversionEngineFactory_CreateEngine_Call) Run(run func(engineName string)) *MockDomainConversionEngineFactory_CreateEngine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockDomainConversionEngineFactory_CreateEngine_Call) Return(conversionEngine domain.ConversionEngine, err error) *MockDomainConversionEngineFactory_CreateEngine_Call {
	_c.Call.Return(conversionEngine, err)
	return _c
}

func (_c *MockDomainConversionEngineFactory_CreateEngine_Call) RunAndReturn(run func(engineName string) (domain.ConversionEngine, error)) *MockDomainConversionEngineFactory_CreateEngine_Call {
	_c.Call.Return(run)
	return _c
}

// GetAvailableEngines provides a mock function for the type MockDomainConversionEngineFactory
func (_mock *MockDomainConversionEngineFactory) GetAvailableEngines() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAvailableEngines")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// MockDomainConversionEngineFactory_GetAvailableEngines_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAvailableEngines'
type MockDomainConversionEngineFactory_GetAvailableEngines_Call struct {
	*mock.Call
}

// GetAvailableEngines is a helper method to define mock.On call
func (_e *MockDomainConversionEngineFactory_Expecter) GetAvailableEngines() *MockDomainConversionEngineFactory_GetAvailableEngines_Call {
	return &MockDomainConversionEngineFactory_GetAvailableEngines_Call{Call: _e.mock.On("GetAvailableEngines")}
}

func (_c *MockDomainConversionEngineFactory_GetAvailableEngines_Call) Run(run func()) *MockDomainConversionEngineFactory_GetAvailableEngines_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDomainConversionEngineFactory_GetAvailableEngines_Call) Return(strings []string) *MockDomainConversionEngineFactory_GetAvailableEngines_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *MockDomainConversionEngineFactory_GetAvailableEngines_Call) RunAndReturn(run func() []string) *MockDomainConversionEngineFactory_GetAvailableEngines_Call {
	_c.Call.Return(run)
	return _c
}
