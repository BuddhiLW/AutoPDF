// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/BuddhiLW/AutoPDF/internal/template"
	"github.com/BuddhiLW/AutoPDF/pkg/config"
	"github.com/BuddhiLW/AutoPDF/pkg/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockTemplateEngine creates a new instance of MockTemplateEngine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTemplateEngine(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTemplateEngine {
	mock := &MockTemplateEngine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTemplateEngine is an autogenerated mock type for the TemplateEngine type
type MockTemplateEngine struct {
	mock.Mock
}

type MockTemplateEngine_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTemplateEngine) EXPECT() *MockTemplateEngine_Expecter {
	return &MockTemplateEngine_Expecter{mock: &_m.Mock}
}

// AddFunction provides a mock function for the type MockTemplateEngine
func (_mock *MockTemplateEngine) AddFunction(name string, fn interface{}) {
	_mock.Called(name, fn)
	return
}

// MockTemplateEngine_AddFunction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFunction'
type MockTemplateEngine_AddFunction_Call struct {
	*mock.Call
}

// AddFunction is a helper method to define mock.On call
//   - name string
//   - fn interface{}
func (_e *MockTemplateEngine_Expecter) AddFunction(name interface{}, fn interface{}) *MockTemplateEngine_AddFunction_Call {
	return &MockTemplateEngine_AddFunction_Call{Call: _e.mock.On("AddFunction", name, fn)}
}

func (_c *MockTemplateEngine_AddFunction_Call) Run(run func(name string, fn interface{})) *MockTemplateEngine_AddFunction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTemplateEngine_AddFunction_Call) Return() *MockTemplateEngine_AddFunction_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockTemplateEngine_AddFunction_Call) RunAndReturn(run func(name string, fn interface{})) *MockTemplateEngine_AddFunction_Call {
	_c.Run(run)
	return _c
}

// Process provides a mock function for the type MockTemplateEngine
func (_mock *MockTemplateEngine) Process(templatePath string) (string, error) {
	ret := _mock.Called(templatePath)

	if len(ret) == 0 {
		panic("no return value specified for Process")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(templatePath)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(templatePath)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(templatePath)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTemplateEngine_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type MockTemplateEngine_Process_Call struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - templatePath string
func (_e *MockTemplateEngine_Expecter) Process(templatePath interface{}) *MockTemplateEngine_Process_Call {
	return &MockTemplateEngine_Process_Call{Call: _e.mock.On("Process", templatePath)}
}

func (_c *MockTemplateEngine_Process_Call) Run(run func(templatePath string)) *MockTemplateEngine_Process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTemplateEngine_Process_Call) Return(s string, err error) *MockTemplateEngine_Process_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockTemplateEngine_Process_Call) RunAndReturn(run func(templatePath string) (string, error)) *MockTemplateEngine_Process_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessToFile provides a mock function for the type MockTemplateEngine
func (_mock *MockTemplateEngine) ProcessToFile(templatePath string, outputPath string) error {
	ret := _mock.Called(templatePath, outputPath)

	if len(ret) == 0 {
		panic("no return value specified for ProcessToFile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(templatePath, outputPath)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTemplateEngine_ProcessToFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessToFile'
type MockTemplateEngine_ProcessToFile_Call struct {
	*mock.Call
}

// ProcessToFile is a helper method to define mock.On call
//   - templatePath string
//   - outputPath string
func (_e *MockTemplateEngine_Expecter) ProcessToFile(templatePath interface{}, outputPath interface{}) *MockTemplateEngine_ProcessToFile_Call {
	return &MockTemplateEngine_ProcessToFile_Call{Call: _e.mock.On("ProcessToFile", templatePath, outputPath)}
}

func (_c *MockTemplateEngine_ProcessToFile_Call) Run(run func(templatePath string, outputPath string)) *MockTemplateEngine_ProcessToFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTemplateEngine_ProcessToFile_Call) Return(err error) *MockTemplateEngine_ProcessToFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTemplateEngine_ProcessToFile_Call) RunAndReturn(run func(templatePath string, outputPath string) error) *MockTemplateEngine_ProcessToFile_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateTemplate provides a mock function for the type MockTemplateEngine
func (_mock *MockTemplateEngine) ValidateTemplate(templatePath string) error {
	ret := _mock.Called(templatePath)

	if len(ret) == 0 {
		panic("no return value specified for ValidateTemplate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(templatePath)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTemplateEngine_ValidateTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateTemplate'
type MockTemplateEngine_ValidateTemplate_Call struct {
	*mock.Call
}

// ValidateTemplate is a helper method to define mock.On call
//   - templatePath string
func (_e *MockTemplateEngine_Expecter) ValidateTemplate(templatePath interface{}) *MockTemplateEngine_ValidateTemplate_Call {
	return &MockTemplateEngine_ValidateTemplate_Call{Call: _e.mock.On("ValidateTemplate", templatePath)}
}

func (_c *MockTemplateEngine_ValidateTemplate_Call) Run(run func(templatePath string)) *MockTemplateEngine_ValidateTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTemplateEngine_ValidateTemplate_Call) Return(err error) *MockTemplateEngine_ValidateTemplate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTemplateEngine_ValidateTemplate_Call) RunAndReturn(run func(templatePath string) error) *MockTemplateEngine_ValidateTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEnhancedTemplateEngine creates a new instance of MockEnhancedTemplateEngine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEnhancedTemplateEngine(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEnhancedTemplateEngine {
	mock := &MockEnhancedTemplateEngine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockEnhancedTemplateEngine is an autogenerated mock type for the EnhancedTemplateEngine type
type MockEnhancedTemplateEngine struct {
	mock.Mock
}

type MockEnhancedTemplateEngine_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEnhancedTemplateEngine) EXPECT() *MockEnhancedTemplateEngine_Expecter {
	return &MockEnhancedTemplateEngine_Expecter{mock: &_m.Mock}
}

// AddFunction provides a mock function for the type MockEnhancedTemplateEngine
func (_mock *MockEnhancedTemplateEngine) AddFunction(name string, fn interface{}) {
	_mock.Called(name, fn)
	return
}

// MockEnhancedTemplateEngine_AddFunction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddFunction'
type MockEnhancedTemplateEngine_AddFunction_Call struct {
	*mock.Call
}

// AddFunction is a helper method to define mock.On call
//   - name string
//   - fn interface{}
func (_e *MockEnhancedTemplateEngine_Expecter) AddFunction(name interface{}, fn interface{}) *MockEnhancedTemplateEngine_AddFunction_Call {
	return &MockEnhancedTemplateEngine_AddFunction_Call{Call: _e.mock.On("AddFunction", name, fn)}
}

func (_c *MockEnhancedTemplateEngine_AddFunction_Call) Run(run func(name string, fn interface{})) *MockEnhancedTemplateEngine_AddFunction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEnhancedTemplateEngine_AddFunction_Call) Return() *MockEnhancedTemplateEngine_AddFunction_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEnhancedTemplateEngine_AddFunction_Call) RunAndReturn(run func(name string, fn interface{})) *MockEnhancedTemplateEngine_AddFunction_Call {
	_c.Run(run)
	return _c
}

// Clone provides a mock function for the type MockEnhancedTemplateEngine
func (_mock *MockEnhancedTemplateEngine) Clone() template.EnhancedTemplateEngine {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Clone")
	}

	var r0 template.EnhancedTemplateEngine
	if returnFunc, ok := ret.Get(0).(func() template.EnhancedTemplateEngine); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(template.EnhancedTemplateEngine)
		}
	}
	return r0
}

// MockEnhancedTemplateEngine_Clone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clone'
type MockEnhancedTemplateEngine_Clone_Call struct {
	*mock.Call
}

// Clone is a helper method to define mock.On call
func (_e *MockEnhancedTemplateEngine_Expecter) Clone() *MockEnhancedTemplateEngine_Clone_Call {
	return &MockEnhancedTemplateEngine_Clone_Call{Call: _e.mock.On("Clone")}
}

func (_c *MockEnhancedTemplateEngine_Clone_Call) Run(run func()) *MockEnhancedTemplateEngine_Clone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnhancedTemplateEngine_Clone_Call) Return(enhancedTemplateEngine template.EnhancedTemplateEngine) *MockEnhancedTemplateEngine_Clone_Call {
	_c.Call.Return(enhancedTemplateEngine)
	return _c
}

func (_c *MockEnhancedTemplateEngine_Clone_Call) RunAndReturn(run func() template.EnhancedTemplateEngine) *MockEnhancedTemplateEngine_Clone_Call {
	_c.Call.Return(run)
	return _c
}

// GetVariable provides a mock function for the type MockEnhancedTemplateEngine
func (_mock *MockEnhancedTemplateEngine) GetVariable(key string) (*domain.Variable, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetVariable")
	}

	var r0 *domain.Variable
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*domain.Variable, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *domain.Variable); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Variable)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEnhancedTemplateEngine_GetVariable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVariable'
type MockEnhancedTemplateEngine_GetVariable_Call struct {
	*mock.Call
}

// GetVariable is a helper method to define mock.On call
//   - key string
func (_e *MockEnhancedTemplateEngine_Expecter) GetVariable(key interface{}) *MockEnhancedTemplateEngine_GetVariable_Call {
	return &MockEnhancedTemplateEngine_GetVariable_Call{Call: _e.mock.On("GetVariable", key)}
}

func (_c *MockEnhancedTemplateEngine_GetVariable_Call) Run(run func(key string)) *MockEnhancedTemplateEngine_GetVariable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockEnhancedTemplateEngine_GetVariable_Call) Return(variable *domain.Variable, err error) *MockEnhancedTemplateEngine_GetVariable_Call {
	_c.Call.Return(variable, err)
	return _c
}

func (_c *MockEnhancedTemplateEngine_GetVariable_Call) RunAndReturn(run func(key string) (*domain.Variable, error)) *MockEnhancedTemplateEngine_GetVariable_Call {
	_c.Call.Return(run)
	return _c
}

// Process provides a mock function for the type MockEnhancedTemplateEngine
func (_mock *MockEnhancedTemplateEngine) Process(templatePath string) (string, error) {
	ret := _mock.Called(templatePath)

	if len(ret) == 0 {
		panic("no return value specified for Process")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (string, error)); ok {
		return returnFunc(templatePath)
	}
	if returnFunc, ok := ret.Get(0).(func(string) string); ok {
		r0 = returnFunc(templatePath)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(templatePath)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockEnhancedTemplateEngine_Process_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Process'
type MockEnhancedTemplateEngine_Process_Call struct {
	*mock.Call
}

// Process is a helper method to define mock.On call
//   - templatePath string
func (_e *MockEnhancedTemplateEngine_Expecter) Process(templatePath interface{}) *MockEnhancedTemplateEngine_Process_Call {
	return &MockEnhancedTemplateEngine_Process_Call{Call: _e.mock.On("Process", templatePath)}
}

func (_c *MockEnhancedTemplateEngine_Process_Call) Run(run func(templatePath string)) *MockEnhancedTemplateEngine_Process_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockEnhancedTemplateEngine_Process_Call) Return(s string, err error) *MockEnhancedTemplateEngine_Process_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockEnhancedTemplateEngine_Process_Call) RunAndReturn(run func(templatePath string) (string, error)) *MockEnhancedTemplateEngine_Process_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessToFile provides a mock function for the type MockEnhancedTemplateEngine
func (_mock *MockEnhancedTemplateEngine) ProcessToFile(templatePath string, outputPath string) error {
	ret := _mock.Called(templatePath, outputPath)

	if len(ret) == 0 {
		panic("no return value specified for ProcessToFile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(templatePath, outputPath)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEnhancedTemplateEngine_ProcessToFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessToFile'
type MockEnhancedTemplateEngine_ProcessToFile_Call struct {
	*mock.Call
}

// ProcessToFile is a helper method to define mock.On call
//   - templatePath string
//   - outputPath string
func (_e *MockEnhancedTemplateEngine_Expecter) ProcessToFile(templatePath interface{}, outputPath interface{}) *MockEnhancedTemplateEngine_ProcessToFile_Call {
	return &MockEnhancedTemplateEngine_ProcessToFile_Call{Call: _e.mock.On("ProcessToFile", templatePath, outputPath)}
}

func (_c *MockEnhancedTemplateEngine_ProcessToFile_Call) Run(run func(templatePath string, outputPath string)) *MockEnhancedTemplateEngine_ProcessToFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEnhancedTemplateEngine_ProcessToFile_Call) Return(err error) *MockEnhancedTemplateEngine_ProcessToFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEnhancedTemplateEngine_ProcessToFile_Call) RunAndReturn(run func(templatePath string, outputPath string) error) *MockEnhancedTemplateEngine_ProcessToFile_Call {
	_c.Call.Return(run)
	return _c
}

// SetVariable provides a mock function for the type MockEnhancedTemplateEngine
func (_mock *MockEnhancedTemplateEngine) SetVariable(key string, value interface{}) error {
	ret := _mock.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for SetVariable")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = returnFunc(key, value)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEnhancedTemplateEngine_SetVariable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetVariable'
type MockEnhancedTemplateEngine_SetVariable_Call struct {
	*mock.Call
}

// SetVariable is a helper method to define mock.On call
//   - key string
//   - value interface{}
func (_e *MockEnhancedTemplateEngine_Expecter) SetVariable(key interface{}, value interface{}) *MockEnhancedTemplateEngine_SetVariable_Call {
	return &MockEnhancedTemplateEngine_SetVariable_Call{Call: _e.mock.On("SetVariable", key, value)}
}

func (_c *MockEnhancedTemplateEngine_SetVariable_Call) Run(run func(key string, value interface{})) *MockEnhancedTemplateEngine_SetVariable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockEnhancedTemplateEngine_SetVariable_Call) Return(err error) *MockEnhancedTemplateEngine_SetVariable_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEnhancedTemplateEngine_SetVariable_Call) RunAndReturn(run func(key string, value interface{}) error) *MockEnhancedTemplateEngine_SetVariable_Call {
	_c.Call.Return(run)
	return _c
}

// SetVariablesFromMap provides a mock function for the type MockEnhancedTemplateEngine
func (_mock *MockEnhancedTemplateEngine) SetVariablesFromMap(variables map[string]interface{}) error {
	ret := _mock.Called(variables)

	if len(ret) == 0 {
		panic("no return value specified for SetVariablesFromMap")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(map[string]interface{}) error); ok {
		r0 = returnFunc(variables)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEnhancedTemplateEngine_SetVariablesFromMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetVariablesFromMap'
type MockEnhancedTemplateEngine_SetVariablesFromMap_Call struct {
	*mock.Call
}

// SetVariablesFromMap is a helper method to define mock.On call
//   - variables map[string]interface{}
func (_e *MockEnhancedTemplateEngine_Expecter) SetVariablesFromMap(variables interface{}) *MockEnhancedTemplateEngine_SetVariablesFromMap_Call {
	return &MockEnhancedTemplateEngine_SetVariablesFromMap_Call{Call: _e.mock.On("SetVariablesFromMap", variables)}
}

func (_c *MockEnhancedTemplateEngine_SetVariablesFromMap_Call) Run(run func(variables map[string]interface{})) *MockEnhancedTemplateEngine_SetVariablesFromMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 map[string]interface{}
		if args[0] != nil {
			arg0 = args[0].(map[string]interface{})
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockEnhancedTemplateEngine_SetVariablesFromMap_Call) Return(err error) *MockEnhancedTemplateEngine_SetVariablesFromMap_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEnhancedTemplateEngine_SetVariablesFromMap_Call) RunAndReturn(run func(variables map[string]interface{}) error) *MockEnhancedTemplateEngine_SetVariablesFromMap_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateTemplate provides a mock function for the type MockEnhancedTemplateEngine
func (_mock *MockEnhancedTemplateEngine) ValidateTemplate(templatePath string) error {
	ret := _mock.Called(templatePath)

	if len(ret) == 0 {
		panic("no return value specified for ValidateTemplate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(templatePath)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockEnhancedTemplateEngine_ValidateTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateTemplate'
type MockEnhancedTemplateEngine_ValidateTemplate_Call struct {
	*mock.Call
}

// ValidateTemplate is a helper method to define mock.On call
//   - templatePath string
func (_e *MockEnhancedTemplateEngine_Expecter) ValidateTemplate(templatePath interface{}) *MockEnhancedTemplateEngine_ValidateTemplate_Call {
	return &MockEnhancedTemplateEngine_ValidateTemplate_Call{Call: _e.mock.On("ValidateTemplate", templatePath)}
}

func (_c *MockEnhancedTemplateEngine_ValidateTemplate_Call) Run(run func(templatePath string)) *MockEnhancedTemplateEngine_ValidateTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockEnhancedTemplateEngine_ValidateTemplate_Call) Return(err error) *MockEnhancedTemplateEngine_ValidateTemplate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockEnhancedTemplateEngine_ValidateTemplate_Call) RunAndReturn(run func(templatePath string) error) *MockEnhancedTemplateEngine_ValidateTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConfigProvider creates a new instance of MockConfigProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfigProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfigProvider {
	mock := &MockConfigProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockConfigProvider is an autogenerated mock type for the ConfigProvider type
type MockConfigProvider struct {
	mock.Mock
}

type MockConfigProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfigProvider) EXPECT() *MockConfigProvider_Expecter {
	return &MockConfigProvider_Expecter{mock: &_m.Mock}
}

// GetConfig provides a mock function for the type MockConfigProvider
func (_mock *MockConfigProvider) GetConfig() *config.Config {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 *config.Config
	if returnFunc, ok := ret.Get(0).(func() *config.Config); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.Config)
		}
	}
	return r0
}

// MockConfigProvider_GetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfig'
type MockConfigProvider_GetConfig_Call struct {
	*mock.Call
}

// GetConfig is a helper method to define mock.On call
func (_e *MockConfigProvider_Expecter) GetConfig() *MockConfigProvider_GetConfig_Call {
	return &MockConfigProvider_GetConfig_Call{Call: _e.mock.On("GetConfig")}
}

func (_c *MockConfigProvider_GetConfig_Call) Run(run func()) *MockConfigProvider_GetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigProvider_GetConfig_Call) Return(config1 *config.Config) *MockConfigProvider_GetConfig_Call {
	_c.Call.Return(config1)
	return _c
}

func (_c *MockConfigProvider_GetConfig_Call) RunAndReturn(run func() *config.Config) *MockConfigProvider_GetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// GetDefaultConfig provides a mock function for the type MockConfigProvider
func (_mock *MockConfigProvider) GetDefaultConfig() *config.Config {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultConfig")
	}

	var r0 *config.Config
	if returnFunc, ok := ret.Get(0).(func() *config.Config); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.Config)
		}
	}
	return r0
}

// MockConfigProvider_GetDefaultConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDefaultConfig'
type MockConfigProvider_GetDefaultConfig_Call struct {
	*mock.Call
}

// GetDefaultConfig is a helper method to define mock.On call
func (_e *MockConfigProvider_Expecter) GetDefaultConfig() *MockConfigProvider_GetDefaultConfig_Call {
	return &MockConfigProvider_GetDefaultConfig_Call{Call: _e.mock.On("GetDefaultConfig")}
}

func (_c *MockConfigProvider_GetDefaultConfig_Call) Run(run func()) *MockConfigProvider_GetDefaultConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfigProvider_GetDefaultConfig_Call) Return(config1 *config.Config) *MockConfigProvider_GetDefaultConfig_Call {
	_c.Call.Return(config1)
	return _c
}

func (_c *MockConfigProvider_GetDefaultConfig_Call) RunAndReturn(run func() *config.Config) *MockConfigProvider_GetDefaultConfig_Call {
	_c.Call.Return(run)
	return _c
}

// LoadConfigFromFile provides a mock function for the type MockConfigProvider
func (_mock *MockConfigProvider) LoadConfigFromFile(path string) (*config.Config, error) {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for LoadConfigFromFile")
	}

	var r0 *config.Config
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*config.Config, error)); ok {
		return returnFunc(path)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *config.Config); ok {
		r0 = returnFunc(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.Config)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockConfigProvider_LoadConfigFromFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadConfigFromFile'
type MockConfigProvider_LoadConfigFromFile_Call struct {
	*mock.Call
}

// LoadConfigFromFile is a helper method to define mock.On call
//   - path string
func (_e *MockConfigProvider_Expecter) LoadConfigFromFile(path interface{}) *MockConfigProvider_LoadConfigFromFile_Call {
	return &MockConfigProvider_LoadConfigFromFile_Call{Call: _e.mock.On("LoadConfigFromFile", path)}
}

func (_c *MockConfigProvider_LoadConfigFromFile_Call) Run(run func(path string)) *MockConfigProvider_LoadConfigFromFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockConfigProvider_LoadConfigFromFile_Call) Return(config1 *config.Config, err error) *MockConfigProvider_LoadConfigFromFile_Call {
	_c.Call.Return(config1, err)
	return _c
}

func (_c *MockConfigProvider_LoadConfigFromFile_Call) RunAndReturn(run func(path string) (*config.Config, error)) *MockConfigProvider_LoadConfigFromFile_Call {
	_c.Call.Return(run)
	return _c
}

// SaveConfigToFile provides a mock function for the type MockConfigProvider
func (_mock *MockConfigProvider) SaveConfigToFile(cfg *config.Config, path string) error {
	ret := _mock.Called(cfg, path)

	if len(ret) == 0 {
		panic("no return value specified for SaveConfigToFile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*config.Config, string) error); ok {
		r0 = returnFunc(cfg, path)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockConfigProvider_SaveConfigToFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveConfigToFile'
type MockConfigProvider_SaveConfigToFile_Call struct {
	*mock.Call
}

// SaveConfigToFile is a helper method to define mock.On call
//   - cfg *config.Config
//   - path string
func (_e *MockConfigProvider_Expecter) SaveConfigToFile(cfg interface{}, path interface{}) *MockConfigProvider_SaveConfigToFile_Call {
	return &MockConfigProvider_SaveConfigToFile_Call{Call: _e.mock.On("SaveConfigToFile", cfg, path)}
}

func (_c *MockConfigProvider_SaveConfigToFile_Call) Run(run func(cfg *config.Config, path string)) *MockConfigProvider_SaveConfigToFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *config.Config
		if args[0] != nil {
			arg0 = args[0].(*config.Config)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockConfigProvider_SaveConfigToFile_Call) Return(err error) *MockConfigProvider_SaveConfigToFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockConfigProvider_SaveConfigToFile_Call) RunAndReturn(run func(cfg *config.Config, path string) error) *MockConfigProvider_SaveConfigToFile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVariableProcessor creates a new instance of MockVariableProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVariableProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVariableProcessor {
	mock := &MockVariableProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockVariableProcessor is an autogenerated mock type for the VariableProcessor type
type MockVariableProcessor struct {
	mock.Mock
}

type MockVariableProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVariableProcessor) EXPECT() *MockVariableProcessor_Expecter {
	return &MockVariableProcessor_Expecter{mock: &_m.Mock}
}

// GetNested provides a mock function for the type MockVariableProcessor
func (_mock *MockVariableProcessor) GetNested(key string) (*domain.Variable, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetNested")
	}

	var r0 *domain.Variable
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*domain.Variable, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *domain.Variable); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Variable)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVariableProcessor_GetNested_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNested'
type MockVariableProcessor_GetNested_Call struct {
	*mock.Call
}

// GetNested is a helper method to define mock.On call
//   - key string
func (_e *MockVariableProcessor_Expecter) GetNested(key interface{}) *MockVariableProcessor_GetNested_Call {
	return &MockVariableProcessor_GetNested_Call{Call: _e.mock.On("GetNested", key)}
}

func (_c *MockVariableProcessor_GetNested_Call) Run(run func(key string)) *MockVariableProcessor_GetNested_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockVariableProcessor_GetNested_Call) Return(variable *domain.Variable, err error) *MockVariableProcessor_GetNested_Call {
	_c.Call.Return(variable, err)
	return _c
}

func (_c *MockVariableProcessor_GetNested_Call) RunAndReturn(run func(key string) (*domain.Variable, error)) *MockVariableProcessor_GetNested_Call {
	_c.Call.Return(run)
	return _c
}

// GetVariable provides a mock function for the type MockVariableProcessor
func (_mock *MockVariableProcessor) GetVariable(key string) (*domain.Variable, error) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetVariable")
	}

	var r0 *domain.Variable
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*domain.Variable, error)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *domain.Variable); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Variable)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVariableProcessor_GetVariable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVariable'
type MockVariableProcessor_GetVariable_Call struct {
	*mock.Call
}

// GetVariable is a helper method to define mock.On call
//   - key string
func (_e *MockVariableProcessor_Expecter) GetVariable(key interface{}) *MockVariableProcessor_GetVariable_Call {
	return &MockVariableProcessor_GetVariable_Call{Call: _e.mock.On("GetVariable", key)}
}

func (_c *MockVariableProcessor_GetVariable_Call) Run(run func(key string)) *MockVariableProcessor_GetVariable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockVariableProcessor_GetVariable_Call) Return(variable *domain.Variable, err error) *MockVariableProcessor_GetVariable_Call {
	_c.Call.Return(variable, err)
	return _c
}

func (_c *MockVariableProcessor_GetVariable_Call) RunAndReturn(run func(key string) (*domain.Variable, error)) *MockVariableProcessor_GetVariable_Call {
	_c.Call.Return(run)
	return _c
}

// ProcessVariables provides a mock function for the type MockVariableProcessor
func (_mock *MockVariableProcessor) ProcessVariables(variables map[string]interface{}) (*domain.VariableCollection, error) {
	ret := _mock.Called(variables)

	if len(ret) == 0 {
		panic("no return value specified for ProcessVariables")
	}

	var r0 *domain.VariableCollection
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(map[string]interface{}) (*domain.VariableCollection, error)); ok {
		return returnFunc(variables)
	}
	if returnFunc, ok := ret.Get(0).(func(map[string]interface{}) *domain.VariableCollection); ok {
		r0 = returnFunc(variables)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.VariableCollection)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = returnFunc(variables)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockVariableProcessor_ProcessVariables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessVariables'
type MockVariableProcessor_ProcessVariables_Call struct {
	*mock.Call
}

// ProcessVariables is a helper method to define mock.On call
//   - variables map[string]interface{}
func (_e *MockVariableProcessor_Expecter) ProcessVariables(variables interface{}) *MockVariableProcessor_ProcessVariables_Call {
	return &MockVariableProcessor_ProcessVariables_Call{Call: _e.mock.On("ProcessVariables", variables)}
}

func (_c *MockVariableProcessor_ProcessVariables_Call) Run(run func(variables map[string]interface{})) *MockVariableProcessor_ProcessVariables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 map[string]interface{}
		if args[0] != nil {
			arg0 = args[0].(map[string]interface{})
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockVariableProcessor_ProcessVariables_Call) Return(variableCollection *domain.VariableCollection, err error) *MockVariableProcessor_ProcessVariables_Call {
	_c.Call.Return(variableCollection, err)
	return _c
}

func (_c *MockVariableProcessor_ProcessVariables_Call) RunAndReturn(run func(variables map[string]interface{}) (*domain.VariableCollection, error)) *MockVariableProcessor_ProcessVariables_Call {
	_c.Call.Return(run)
	return _c
}

// SetVariable provides a mock function for the type MockVariableProcessor
func (_mock *MockVariableProcessor) SetVariable(key string, value interface{}) error {
	ret := _mock.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for SetVariable")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = returnFunc(key, value)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockVariableProcessor_SetVariable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetVariable'
type MockVariableProcessor_SetVariable_Call struct {
	*mock.Call
}

// SetVariable is a helper method to define mock.On call
//   - key string
//   - value interface{}
func (_e *MockVariableProcessor_Expecter) SetVariable(key interface{}, value interface{}) *MockVariableProcessor_SetVariable_Call {
	return &MockVariableProcessor_SetVariable_Call{Call: _e.mock.On("SetVariable", key, value)}
}

func (_c *MockVariableProcessor_SetVariable_Call) Run(run func(key string, value interface{})) *MockVariableProcessor_SetVariable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 interface{}
		if args[1] != nil {
			arg1 = args[1].(interface{})
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockVariableProcessor_SetVariable_Call) Return(err error) *MockVariableProcessor_SetVariable_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockVariableProcessor_SetVariable_Call) RunAndReturn(run func(key string, value interface{}) error) *MockVariableProcessor_SetVariable_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTemplateValidator creates a new instance of MockTemplateValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTemplateValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTemplateValidator {
	mock := &MockTemplateValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTemplateValidator is an autogenerated mock type for the TemplateValidator type
type MockTemplateValidator struct {
	mock.Mock
}

type MockTemplateValidator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTemplateValidator) EXPECT() *MockTemplateValidator_Expecter {
	return &MockTemplateValidator_Expecter{mock: &_m.Mock}
}

// ValidateSyntax provides a mock function for the type MockTemplateValidator
func (_mock *MockTemplateValidator) ValidateSyntax(templateContent string) error {
	ret := _mock.Called(templateContent)

	if len(ret) == 0 {
		panic("no return value specified for ValidateSyntax")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(templateContent)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTemplateValidator_ValidateSyntax_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateSyntax'
type MockTemplateValidator_ValidateSyntax_Call struct {
	*mock.Call
}

// ValidateSyntax is a helper method to define mock.On call
//   - templateContent string
func (_e *MockTemplateValidator_Expecter) ValidateSyntax(templateContent interface{}) *MockTemplateValidator_ValidateSyntax_Call {
	return &MockTemplateValidator_ValidateSyntax_Call{Call: _e.mock.On("ValidateSyntax", templateContent)}
}

func (_c *MockTemplateValidator_ValidateSyntax_Call) Run(run func(templateContent string)) *MockTemplateValidator_ValidateSyntax_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTemplateValidator_ValidateSyntax_Call) Return(err error) *MockTemplateValidator_ValidateSyntax_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTemplateValidator_ValidateSyntax_Call) RunAndReturn(run func(templateContent string) error) *MockTemplateValidator_ValidateSyntax_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateTemplate provides a mock function for the type MockTemplateValidator
func (_mock *MockTemplateValidator) ValidateTemplate(templatePath string) error {
	ret := _mock.Called(templatePath)

	if len(ret) == 0 {
		panic("no return value specified for ValidateTemplate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(templatePath)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTemplateValidator_ValidateTemplate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateTemplate'
type MockTemplateValidator_ValidateTemplate_Call struct {
	*mock.Call
}

// ValidateTemplate is a helper method to define mock.On call
//   - templatePath string
func (_e *MockTemplateValidator_Expecter) ValidateTemplate(templatePath interface{}) *MockTemplateValidator_ValidateTemplate_Call {
	return &MockTemplateValidator_ValidateTemplate_Call{Call: _e.mock.On("ValidateTemplate", templatePath)}
}

func (_c *MockTemplateValidator_ValidateTemplate_Call) Run(run func(templatePath string)) *MockTemplateValidator_ValidateTemplate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockTemplateValidator_ValidateTemplate_Call) Return(err error) *MockTemplateValidator_ValidateTemplate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTemplateValidator_ValidateTemplate_Call) RunAndReturn(run func(templatePath string) error) *MockTemplateValidator_ValidateTemplate_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateVariables provides a mock function for the type MockTemplateValidator
func (_mock *MockTemplateValidator) ValidateVariables(templateContent string, variables map[string]interface{}) error {
	ret := _mock.Called(templateContent, variables)

	if len(ret) == 0 {
		panic("no return value specified for ValidateVariables")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, map[string]interface{}) error); ok {
		r0 = returnFunc(templateContent, variables)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTemplateValidator_ValidateVariables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateVariables'
type MockTemplateValidator_ValidateVariables_Call struct {
	*mock.Call
}

// ValidateVariables is a helper method to define mock.On call
//   - templateContent string
//   - variables map[string]interface{}
func (_e *MockTemplateValidator_Expecter) ValidateVariables(templateContent interface{}, variables interface{}) *MockTemplateValidator_ValidateVariables_Call {
	return &MockTemplateValidator_ValidateVariables_Call{Call: _e.mock.On("ValidateVariables", templateContent, variables)}
}

func (_c *MockTemplateValidator_ValidateVariables_Call) Run(run func(templateContent string, variables map[string]interface{})) *MockTemplateValidator_ValidateVariables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 map[string]interface{}
		if args[1] != nil {
			arg1 = args[1].(map[string]interface{})
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTemplateValidator_ValidateVariables_Call) Return(err error) *MockTemplateValidator_ValidateVariables_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTemplateValidator_ValidateVariables_Call) RunAndReturn(run func(templateContent string, variables map[string]interface{}) error) *MockTemplateValidator_ValidateVariables_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFileProcessor creates a new instance of MockFileProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFileProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFileProcessor {
	mock := &MockFileProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFileProcessor is an autogenerated mock type for the FileProcessor type
type MockFileProcessor struct {
	mock.Mock
}

type MockFileProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFileProcessor) EXPECT() *MockFileProcessor_Expecter {
	return &MockFileProcessor_Expecter{mock: &_m.Mock}
}

// CreateDirectory provides a mock function for the type MockFileProcessor
func (_mock *MockFileProcessor) CreateDirectory(path string) error {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for CreateDirectory")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(path)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFileProcessor_CreateDirectory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDirectory'
type MockFileProcessor_CreateDirectory_Call struct {
	*mock.Call
}

// CreateDirectory is a helper method to define mock.On call
//   - path string
func (_e *MockFileProcessor_Expecter) CreateDirectory(path interface{}) *MockFileProcessor_CreateDirectory_Call {
	return &MockFileProcessor_CreateDirectory_Call{Call: _e.mock.On("CreateDirectory", path)}
}

func (_c *MockFileProcessor_CreateDirectory_Call) Run(run func(path string)) *MockFileProcessor_CreateDirectory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFileProcessor_CreateDirectory_Call) Return(err error) *MockFileProcessor_CreateDirectory_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFileProcessor_CreateDirectory_Call) RunAndReturn(run func(path string) error) *MockFileProcessor_CreateDirectory_Call {
	_c.Call.Return(run)
	return _c
}

// FileExists provides a mock function for the type MockFileProcessor
func (_mock *MockFileProcessor) FileExists(path string) bool {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for FileExists")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(path)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockFileProcessor_FileExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FileExists'
type MockFileProcessor_FileExists_Call struct {
	*mock.Call
}

// FileExists is a helper method to define mock.On call
//   - path string
func (_e *MockFileProcessor_Expecter) FileExists(path interface{}) *MockFileProcessor_FileExists_Call {
	return &MockFileProcessor_FileExists_Call{Call: _e.mock.On("FileExists", path)}
}

func (_c *MockFileProcessor_FileExists_Call) Run(run func(path string)) *MockFileProcessor_FileExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFileProcessor_FileExists_Call) Return(b bool) *MockFileProcessor_FileExists_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *MockFileProcessor_FileExists_Call) RunAndReturn(run func(path string) bool) *MockFileProcessor_FileExists_Call {
	_c.Call.Return(run)
	return _c
}

// ReadFile provides a mock function for the type MockFileProcessor
func (_mock *MockFileProcessor) ReadFile(path string) ([]byte, error) {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for ReadFile")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return returnFunc(path)
	}
	if returnFunc, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = returnFunc(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(path)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFileProcessor_ReadFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadFile'
type MockFileProcessor_ReadFile_Call struct {
	*mock.Call
}

// ReadFile is a helper method to define mock.On call
//   - path string
func (_e *MockFileProcessor_Expecter) ReadFile(path interface{}) *MockFileProcessor_ReadFile_Call {
	return &MockFileProcessor_ReadFile_Call{Call: _e.mock.On("ReadFile", path)}
}

func (_c *MockFileProcessor_ReadFile_Call) Run(run func(path string)) *MockFileProcessor_ReadFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFileProcessor_ReadFile_Call) Return(bytes []byte, err error) *MockFileProcessor_ReadFile_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockFileProcessor_ReadFile_Call) RunAndReturn(run func(path string) ([]byte, error)) *MockFileProcessor_ReadFile_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveFile provides a mock function for the type MockFileProcessor
func (_mock *MockFileProcessor) RemoveFile(path string) error {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for RemoveFile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(path)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFileProcessor_RemoveFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveFile'
type MockFileProcessor_RemoveFile_Call struct {
	*mock.Call
}

// RemoveFile is a helper method to define mock.On call
//   - path string
func (_e *MockFileProcessor_Expecter) RemoveFile(path interface{}) *MockFileProcessor_RemoveFile_Call {
	return &MockFileProcessor_RemoveFile_Call{Call: _e.mock.On("RemoveFile", path)}
}

func (_c *MockFileProcessor_RemoveFile_Call) Run(run func(path string)) *MockFileProcessor_RemoveFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFileProcessor_RemoveFile_Call) Return(err error) *MockFileProcessor_RemoveFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFileProcessor_RemoveFile_Call) RunAndReturn(run func(path string) error) *MockFileProcessor_RemoveFile_Call {
	_c.Call.Return(run)
	return _c
}

// WriteFile provides a mock function for the type MockFileProcessor
func (_mock *MockFileProcessor) WriteFile(path string, content []byte) error {
	ret := _mock.Called(path, content)

	if len(ret) == 0 {
		panic("no return value specified for WriteFile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, []byte) error); ok {
		r0 = returnFunc(path, content)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFileProcessor_WriteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteFile'
type MockFileProcessor_WriteFile_Call struct {
	*mock.Call
}

// WriteFile is a helper method to define mock.On call
//   - path string
//   - content []byte
func (_e *MockFileProcessor_Expecter) WriteFile(path interface{}, content interface{}) *MockFileProcessor_WriteFile_Call {
	return &MockFileProcessor_WriteFile_Call{Call: _e.mock.On("WriteFile", path, content)}
}

func (_c *MockFileProcessor_WriteFile_Call) Run(run func(path string, content []byte)) *MockFileProcessor_WriteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []byte
		if args[1] != nil {
			arg1 = args[1].([]byte)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFileProcessor_WriteFile_Call) Return(err error) *MockFileProcessor_WriteFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFileProcessor_WriteFile_Call) RunAndReturn(run func(path string, content []byte) error) *MockFileProcessor_WriteFile_Call {
	_c.Call.Return(run)
	return _c
}
